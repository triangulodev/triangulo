[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.9","content-config-digest","5bf3ccec58ffc7f5","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://triangulo.dev/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"css-variables\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":false},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,25,26,35,36,45,46,55,56,65,66,75,76,85,86,95,96,105,106,115,116,125,126,135,136,145,146,155,156,165,166,175,176,185,186,195,196,205,206,215,216,225,226,235,236],"5-metodos-array",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"deferredRender":24},{"layout":14,"title":15,"description":16,"authorName":17,"authorImage":18,"pubDate":19,"ogImage":20},"../../../layouts/Layout.astro","5 m√©todos do Array no JS que voc√™ deveria usar mais","A classe Array possue muitos m√©todos que podem facilitar muito a vida de quem trabalha com JavaScript, mas nem todo mundo usa alguns dos seus m√©todos como .some ou .every.","Hugo de Oliveira","/authors/hugo.png",["Date","2020-11-23T00:00:00.000Z"],"/posts/5-metodos-array/social.png","Alguns dos m√©todos do Array j√° s√£o bastante conhecidos por quem trabalha com JavaScript. Um deles √© o `.map`, que tanto usamos para transformar valores em um Array. Entretanto, existem alguns m√©todos que eu quase nunca vi as pessoas usando, mesmo quando eles seriam perfeitos para o problema que elas estavam tentando resolver.\n\n## `.some`\n\nO m√©todo `.some` serve para voc√™ verificar se uma condi√ß√£o √© verdadeira para pelo menos um valor dentro do Array ‚Äì um caso de uso bastante comum. O `.some` recebe uma fun√ß√£o `callbackFn` que deve testar cada um dos elementos do Array. A `callbackFn` recebe tr√™s argumentos:\n\n- `element`: o valor do elemento;\n- `index`: o √≠ndice deste elemento no Array;\n- `array`: o Array sendo testado.\n\nO valor retornado pela `callbackFn` deve ser _convert√≠vel_ para `true` ou `false` atrav√©s da [coer√ß√£o de tipos](https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion).\n\nPara mostrar um exemplo de como usar o m√©todo `.some`, criaremos um Array `fruits` e as fun√ß√µes `isApple` e `isKiwi` que testar√£o se um elemento √© uma ma√ß√£ ou um kiwi.\n\n```js\nlet fruits = [üçé, üçè, üçå, üçä, ü••];\n\nfunction isApple(fruit) {\n  return fruit === üçé;\n}\n\nfunction isKiwi(fruit) {\n  return fruit === ü•ù;\n}\n```\n\nPodemos ent√£o usar o m√©todo `.some` no Array `fruits`, passando como `callbackFn` uma das duas fun√ß√µes que criamos. Esta chamada retornar√° `true` se as fun√ß√µes retornarem `true` para pelo menos um dos elementos em `fruits`.\n\n```js\nfruits.some(isApple); // => true\nfruits.some(isKiwi); // => false\n```\n\n## `.every`\n\nParecido com o `.some`, o `.every` √© usado para verificar se uma condi√ß√£o √© verdadeira para todos os elementos de um Array. Esse m√©todo tamb√©m recebe uma fun√ß√£o `callbackFn`, com os mesmo argumentos `element`, `index` e `array`.\n\nNo exemplo a seguir, criaremos um Array de objetos com dados sobre pessoas e os testaremos com fun√ß√µes que verificam se os dados delas atendem √† uma condi√ß√£o.\n\n```js\nlet people = [\n  { name: \"Jo√£o\", age: 20 },\n  { name: \"Maria\", age: 18 },\n  { name: \"Lucas\", age: 22 },\n];\n\nfunction isOverAge(person) {\n  return person.age >= 18;\n}\n\nfunction isMaria(person) {\n  return person.name === \"Maria\";\n}\n```\n\nA fun√ß√£o `isOverAge` testar√° se `person.age` √© maior do que `18`. Como esta condi√ß√£o √© verdadeira para todos os elementos do Array, o m√©todo `.every` retornar√° `true` com essa condi√ß√£o.\n\n```js\npeople.every(isOverAge); // => true\n```\n\nJ√° a fun√ß√£o `isMaria` testar√° se `person.name` √© `'Maria'`, o que n√£o √© verdadeiro para todos os elementos do Array `people`. A chamada do m√©todo `.every`, neste caso, retornar√° `false`.\n\n```js\npeople.every(isMaria); // => false\n```\n\n## `.flat`\n\nAlgumas vezes temos um Array que tem outros Arrays dentro dele e precisamos transformar todos esses elementos em um grande Array com apenas um n√≠vel de profundidade. O m√©todo `.flat` faz exatamente isso. Ele recebe um √∫nico argumento opcional `depth`, que pode ser utilizado para configurar o n√≠vel de profundidade de sub-Arrays que devem ser concatenados em um √∫nico n√≠vel.\n\n```js\nlet arrays = [1, 2, 3, [4, 5], [6, 7, [8, 9]]];\n\narrays.flat(); // => [1, 2, 3, 4, 5, 6, 7, [8, 9]]\narrays.flat(2); // => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nComo por padr√£o `depth` √© igual a `1`, a primeira chamada ainda retorna um array com um sub-array. Em casos em que voc√™ n√£o tem ideia do n√≠vel de profundidade dos sub-arrays mas quer ter certeza que todos os elementos estar√£o em apenas um √∫nico n√≠vel, voc√™ pode passar `Infinity` como argumento para o m√©todo `.flat()`.\n\n```js\nlet arrays = [[[[[[[[[[[1, 2, 3]], [[[[[[4]]]]]]]]]]]]]]];\n\narrays.flat(Infinity); // => [1, 2, 3, 4]\n```\n\n## `.flatMap`\n\nUm dos casos de uso mais comuns para o m√©todo `.flat` √© utiliz√°-lo logo ap√≥s uma chamada ao `.map` que gerou sub-arrays. Podemos utilizar como exemplo exemplo listar todos os amigos (`.friends`) de todas as pessoas (`person`) em um Array.\n\n```js\nlet people = [\n  { name: \"Jo√£o\", friends: [{ name: \"Gabriel\" }, { name: \"Laura\" }] },\n  { name: \"Maria\", friends: [{ name: \"Bruna\" }, { name: \"Luiza\" }] },\n  { name: \"Rebeca\", friends: [{ name: \"Gustavo\" }] },\n];\n```\n\nSe usarmos apenas o m√©todo `.map` com uma fun√ß√£o para retornar todos os amigos de cada uma das pessoas, ter√≠amos um Array com sub-arrays.\n\n```js\nfunction getFriends(person) {\n  return person.friends;\n}\n\npeople.map(getFriends);\n/* =>\n[\n  [{name: 'Gabriel'}, {name: 'Laura'}}],\n  [{name: 'Bruna'}, {name: 'Luiza}],\n  [{name: 'Gustavo}]\n]\n*/\n```\n\nJ√° com o m√©todo `.flatMap`, este Array retornado pela fun√ß√£o `getFriends` ser√° concatenado com os resultados anteriores, retornando um Array com apenas um n√≠vel de profundidade.\n\n```js\npeople.flatMap(getFriends);\n/* =>\n[\n  {name: 'Gabriel'},\n  {name: 'Laura'}},\n  {name: 'Bruna'},\n  {name: 'Luiza},\n  {name: 'Gustavo}\n]\n*/\n```\n\nVale alertar que, ao contr√°rio do m√©todo `.flat`, n√£o √© poss√≠vel controlar a profundidade de sub-arrays que ser√£o concatenados em apenas um n√≠vel. O m√©todo `.flatMap` concatenar√° elementos em apenas um n√≠vel de profundidade.\n\n## `.concat`\n\nEu sinceramente n√£o sei porqu√™ poucas pessoas utilizam o `.concat`, mas se precisasse apostar seria por causa da grande quantidade de exemplos que vemos utilizando o operador de `spread` (`...`) para juntar elementos de diferentes Arrays em um s√≥.\n\nO m√©todo `.concat` pode ser utilizado para concatenar diferentes itens em um √∫nico Array. Ele recebe como argumento um ou mais itens que podem tanto ser valores quanto outros Arrays e retorna um novo Array com todos esses itens concatenados.\n\n```js\n[1].concat(2); //         => [1, 2]\n[1].concat(2, 3); //      => [1, 2, 3]\n[1].concat([2, 3]); //    => [1, 2, 3]\n[1].concat(2, [3, 4]); // => [1, 2, 3, 4]\n```\n\nSempre que voc√™ precisar verificar se um valor √© ou n√£o um Array antes de utilizar um operador `spread`, considere usar o m√©todo `.concat`.\n\n```js\nlet item = 3;\n[1, 2, ...(Array.isArray(item) ? item : [item])]; // ‚ùå\n[1, 2].concat(item); // ‚úÖ\n```\n\nComo o m√©todo `.concat` funciona tanto em valores como em Arrays, tamb√©m podemos implementar uma fun√ß√£o que se comporta como o m√©todo `.flat` facilmente:\n\n```js\nfunction flat(array, nestedArray) {\n  return array.concat(...nestedArray);\n}\n\nflat([1, 2], [3, [4, 5]]); // => [1, 2, 3, 4, 5]\n```\n\nNo exemplo acima, utilizamos o operador `spread` para usar cada um dos elementos de `nestedArray` como argumentos para a chamada do m√©todo `.concat`.\n\n## Continue aprendendo\n\nA classe Array tem muitos m√©todos √∫teis para facilitar a sua vida no JavaScript enquanto estiver trabalhando com Arrays. Quando utilizamos m√©todos como `.some` e `.every`, mostramos muito mais a inten√ß√£o de um c√≥digo do que quando os implementamos com loops `for` ou outros m√©todos mais gen√©ricos como o `.reduce`. Para aprender mais sobre outros m√©todos dispon√≠veis na classe Array, n√£o deixe de visitar a [refer√™ncia completa no MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) ou a pr√≥pria [especifica√ß√£o oficial da classe Array](https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object).\n\nSe voc√™ transforma muitos Arrays no seu c√≥digo JavaScript e j√° acha que os m√©todos da classe Array nem sempre s√£o suficientes, vale a pena usar bibliotecas como o [Lodash](https://lodash.com/).","src/pages/posts/5-metodos-array/index.mdx","547b143bcb782e7e",true,"analisando-performance-chrome-devtools",{"id":25,"data":27,"body":32,"filePath":33,"digest":34,"deferredRender":24},{"layout":14,"title":28,"description":29,"authorName":17,"authorImage":18,"pubDate":30,"ogImage":31},"Analisando a Performance de Anima√ß√µes CSS com o DevTools","Aprenda a utilizar a aba de Performance do DevTools para encontrar problemas na performance das suas anima√ß√µes CSS",["Date","2021-05-26T00:00:00.000Z"],"/posts/analisando-performance-chrome-devtools/social.png","Uma anima√ß√£o lenta e desajeitada √© capaz de diminuir bastante a minha percep√ß√£o de valor de um site. No computador √© menos comum ver anima√ß√µes assim, mas o que n√£o falta s√£o sites com anima√ß√µes lentas no celular.\n\nQuando for a sua vez de implementar um site com anima√ß√µes perfeitas, precisamos [entender o que torna uma anima√ß√£o fluida](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css), mas uma parte importante do processo √© saber como analisar o que est√° acontecendo. E para esse problema, o [DevTools do Chrome](https://triangulo.dev/posts/atomo-chrome-developer-tools) tem uma ferramenta muito √∫til para n√≥s: [a aba de Performance](https://triangulo.dev/posts/atomo-aba-performance-devtools).\n\n## √çndice\n\n## A Aba de Performance do Chrome DevTools\n\nPara acessar a aba de Performance do Chrome DevTools, basta abrir o DevTools em **Menu ...**, **Mais Ferramentas**, **Ferramentas do Desenvolvedor**, **Performance**.\n\n![Aba de Performance do Chrome DevTools no macOS, sem relat√≥rio](/posts/analisando-performance-chrome-devtools/chrome-devtools-aba-performance-macos.png)\n\nQuando voc√™ abre a aba de Performance, ela come√ßa vazia. No topo, temos os controles da aba.\n\n![Controles da Aba de Performance do Chrome DevTools no macOS, com etiquetas](/posts/analisando-performance-chrome-devtools/chrome-devtools-aba-performance-macos-controles.png)\n\nA aba de Performance n√£o serve apenas para medir a performance de anima√ß√µes, mas tamb√©m para analisar problemas de mem√≥ria, rede e web vitals.\n\n## Analisando um Relat√≥rio de Performance de Anima√ß√£o do DevTools\n\nNeste post, vamos analisar um [Codepen](https://codepen.io/hugobessaa/pen/WNpjYgG) simples que criei. Nele temos uma lista de _tweets_ e um menu. No _hover_, os tweets fazem uma anima√ß√£o de mudan√ßa de tamanho e de cor. Ao clicar no bot√£o \"Menu\", um menu lateral √© animado da direita para a esquerda e o conte√∫do da p√°gina fica mais escuro.\n\nPor ser um exemplo simples e contido, a performance das anima√ß√µes n√£o deve ser ruim, mesmo que o c√≥digo tenha v√°rios problemas de performance. Para nossos pr√≥ximos testes, vou rodar o Codepen em um **Pixel 3a** e [debugar remotamente pelo USB](https://triangulo.dev/posts/atomo-debugar-chrome-do-android-devtools) utilizando o [CPU Throttling da aba de Performance](https://triangulo.dev/posts/atomo-cpu-throttling-chrome-devtools).\n\nPara abrir apenas o conte√∫do do Codepen no celular, sem a interface e os editores de texto:\n\n1. Abra o **[Codepen](https://codepen.io/hugobessaa/pen/WNpjYgG)** que criamos;\n2. Clique em **Change View**;\n3. Selecione **Debug mode**;\n4. Abra o link no seu celular.\n\nCom o Codepen aberto no celular e o DevTools remoto aberto, eu iniciei uma grava√ß√£o e interagi com os _tweets_ e o _menu_. De cara, podemos perceber alguns problemas marcados em vermelho.\n\nO relat√≥rio do DevTool √© dividido em algumas se√ß√µes. A **Timeline** traz um resumo do relat√≥rio que foi gravado. Em **Frames**, temos capturas de tela dos frames renderizados durante a grava√ß√£o. Em **Experience**, vemos alertas de problemas na experi√™ncia do usu√°rio. Na se√ß√£o **Main** temos um gr√°fico com todas as tarefas executadas na thread principal do navegador. Na parte inferior, **Summary** mostra um resumo dos tipos de tarefa executados e o total de tempo que elas ocuparam. Estas s√£o as se√ß√µes que vamos explorar neste post.\n\n![Se√ß√µes da Aba de Performance do Devtools do Chrome](/posts/analisando-performance-chrome-devtools/secoes-aba-performance-chrome-devtools.png)\n\nEm Frames podemos ver alguns frames ficaram preenchidos com vermelho durante a grava√ß√£o. Eles apontam para frames que demoraram para renderizar e foram descartados (\"_dropped_\"). **Cada frame [precisa ser renderizado em at√© 16ms se quisermos uma anima√ß√£o perfeita](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css)**, mas estamos desviando disso agora.\n\nPara conseguir analisar de perto o que aconteceu para os frames serem descartados, basta clicar na regi√£o e usar o scroll do seu mouse/trackpad para navegar pelos frames.\n\nNa se√ß√£o **Main**, cada _task_ √© detalhada. Embaixo da _task_, temos as partes do fluxo de renderiza√ß√£o. A _task_ da imagem abaixo levou 23.73ms para terminar, o que acabou fazendo com que o frame fosse descartado.\n\n![Relat√≥rio da Aba de Performance do DevTools do Chrome com um frame descartado](/posts/analisando-performance-chrome-devtools/relatorio-performance-devtools-nao-otimizado-frame-descartado.png)\n\nNossa anima√ß√£o est√° lenta. No _hover_ dos _tweets_, alteramos o `padding` dos elementos, iniciando computa√ß√µes de layout. Na abertura do menu, muitos [Layout Shifts](https://triangulo.dev/posts/atomo-layout-shift) e c√°lculos de layout e paint. Alguns frames demoraram 31ms para serem renderizados, diminuindo nossa anima√ß√£o a at√© 32fps em alguns momentos.\n\nSe clicarmos no problema de Layout Shift na se√ß√£o Experience, podemos ver um resumo do que aconteceu e at√© qual n√≥ do DOM foi respons√°vel por esse problema.\n\n**Agora, o que podemos fazer para melhorar?** Basta colocar em pr√°tica o que aprendemos em [Criando anima√ß√µes perfeitas com CSS animation e transition](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css).\n\nNeste post n√£o vou cobrir cada mudan√ßa que fiz no Codepen para melhorar a performance da anima√ß√£o. Fa√ßo isso de prop√≥sito, pois quero que voc√™ aprenda a fazer por conta pr√≥pria. A dica que vou dar √© que **evitar as fases de Layout e Paint √© bastante importante para melhorar a performance de anima√ß√µes CSS**.\n\nSe voc√™ ainda n√£o aprendeu a fazer estas melhorias, [siga estas instru√ß√µes para modificar o nosso Codepen](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css#sua-vez-de-deixar-uma-anima√ß√£o-css-perfeita).\n\n### Analisando nossas mudan√ßas\n\nVamos analisar agora um [Codepen com anima√ß√µes flu√≠das](https://codepen.io/hugobessaa/pen/GRWvZYy), otimizado. O visual das anima√ß√µes √© praticamente id√™ntico, mas eu alterei as anima√ß√µes para fazerem **melhor uso da fase de Composite**.\n\nMesmo os frames que renderizaram duas ou tr√™s anima√ß√µes ao mesmo tempo, tiveram suas tasks na casa dos 10ms. O tempo que cada task leva ainda est√° alto, mas vale lembrar que estamos testando em um Pixel 3a com CPU Throttling em 4x.\n\n![Relat√≥rio da Aba de Performance do DevTools do Chrome depois de aplicar otimiza√ß√µes](/posts/analisando-performance-chrome-devtools/relatorio-performance-devtools-otimizado.png)\n\nNo Codepen otimizado, as tarefas das fases de Layout e Paint ocuparam uma fra√ß√£o do tempo quando comparadas com as do Codepen n√£o-otimizado. Depois da otimiza√ß√£o n√≥s n√£o s√≥ temos uma computa√ß√£o mais r√°pida nessas fases, n√≥s tamb√©m evitamos que elas sejam necess√°rias para a maior parte dos elementos na tela.\n\n## Visualizando problemas de Paint e Layout Shift\n\nAl√©m da aba de Performance, o DevTools do Chrome tamb√©m possui algumas outras ferramentas que podem nos ajudar a debugar anima√ß√µes CSS.\n\nA primeira delas √© a [ferramenta de Rendering](https://triangulo.dev/posts/atomo-ferramenta-rendering-devtools). Ela nos possibilita visualizar coisas como:\n\n- **Paint Flashing**: √°reas que precisaram de uma fase de Paint, em verde;\n- **Layout Shift Regions**: regi√µes que sofreram com Layout Shift, em azul;\n- **Frame Rendering Stats**: estat√≠sticas de renderizac√£o de frames e mem√≥ria da GPU.\n\nPara visualizar como o primeiro Codepen n√£o-otimizado estava sendo renderizado, vamos habilitar Paint Flashing, Layout Shift Regions na ferramenta de Rendering e interagir com a p√°gina.\n\n![Anima√ß√£o da visualiza√ß√£o de Paint Flashing e Layout Shift Regions do Codepen n√£o-otimizado](/posts/analisando-performance-chrome-devtools/gif-rendering-paint-layout-shift-nao-otimizado.gif)\n\nNossa intera√ß√£o com os _tweets_ mostra o problema de animar com `padding` logo de cara: todos os outros _tweets_ vis√≠veis precisaram de uma fase de Paint durante toda a anima√ß√£o.\n\nJ√° com o menu, o problema √© maior. Quando abrimos o menu, ele passa por Paint v√°rias vezes durante a anima√ß√£o o elemento que escurece o conte√∫do principal tamb√©m demanda Paint a cada frame.\n\nCom as mudan√ßas que eu fiz, o que vemos no [Codepen otimizado](https://codepen.io/hugobessaa/pen/GRWvZYy) √© totalmente diferente. No _hover_ apenas o _tweet_ que interagimos passa pela fase de Paint e na abertura do menu os elementos s√£o renderizados poucas vezes.\n\n![Anima√ß√£o da visualiza√ß√£o de Paint Flashing e Layout Shift Regions do Codepen otimizado](/posts/analisando-performance-chrome-devtools/gif-rendering-paint-layout-shift-otimizado.gif)\n\nSe voc√™ quiser analisar as anima√ß√µes, mas acha que elas est√£o muito r√°pidas, o DevTools t√™m tamb√©m a [**ferramenta de Animations**](https://triangulo.dev/posts/atomo-ferramenta-animations-devtools) que deixa voc√™ diminuir a velocidade de todas as anima√ß√µes.\n\n![25% de velocidade na ferramentas de Animations](/posts/analisando-performance-chrome-devtools/animations-em-25-por-cento.png)\n\n## Continue aprendendo\n\nA aba de Performance e outras ferramentas do DevTools do Chrome s√£o muito √∫teis para debugarmos anima√ß√µes CSS. Elas nos d√£o um caminho para entendermos o que est√° acontecendo por baixo dos panos.\n\nNem sempre o relat√≥rio ser√° suficiente para solucionarmos nossos problemas de performance. Na verdade, o mais importante √© entender como criar anima√ß√µes flu√≠das em primeiro lugar. Explore o [Codepen n√£o-otimizado](https://codepen.io/hugobessaa/pen/WNpjYgG) e o [Codepen otimizado](https://codepen.io/hugobessaa/pen/GRWvZYy) usando que o que aprendeu neste post para ganhar experi√™ncia e criar anima√ß√µes cada vez melhores.\n\nO pessoal do Chrome tamb√©m escreveu [uma refer√™ncia muito completa sobre a aba de Performance](https://developer.chrome.com/docs/devtools/evaluate-performance/reference/) que aborda cada uma das partes desta ferramenta em mais detalhes.","src/pages/posts/analisando-performance-chrome-devtools/index.mdx","a3cf76be007998ca","atomo-chrome-developer-tools",{"id":35,"data":37,"body":42,"filePath":43,"digest":44,"deferredRender":24},{"layout":14,"title":38,"description":39,"authorName":17,"authorImage":18,"pubDate":40,"ogImage":41},"Chrome Developer Tools (Ferramentas do Desenvolvedor)","A Chrome Developer Tools, ou Ferramentas do Desenvolvedor, √© um painel do navegador Chrome que conta com diversas ferramentas √∫teis para desenvolvedores",["Date","2021-05-26T00:00:00.000Z"],"/posts/atomo-chrome-developer-tools/social.png","A **Chrome Developer Tools**, ou **Ferramentas do Desenvolvedor**, √© um painel do navegador Chrome que conta com diversas ferramentas √∫teis para desenvolvedores web explorarem diversos aspectos de uma p√°gina/aplicativo web.\n\n![Captura de Tela (screenshot) do Chrome Developer Tools (Ferramentas do Desenvolvedor) em um computador macOS](/posts/atomo-chrome-developer-tools/chrome-developer-tools-screenshot.png)\n\nAlgumas das ferramentas dispon√≠veis s√£o:\n\n- **Inspetor** de elementos no DOM\n- **Console** JavaScript\n- **Aba de Network** para monitoramento da rede\n- **Aba de Performance** para an√°lise de relat√≥rios de performance de renderiza√ß√£o\n- **Aba de Application** com ferramentas para verificar informa√ß√µes da webapp, dados armazenados, cache e servi√ßos em segundo-plano\n\n## Refer√™ncias\n\n- [Chrome DevTools - Overview (developer.chrome.com)](https://developer.chrome.com/docs/devtools/overview/)\n\n## Backlinks\n\n- [Criando anima√ß√µes perfeitas com CSS animation e transition](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css)\n  > O Chrome possui uma incr√≠vel ferramenta que pode nos ajudar a entender todo o fluxo de renderiza√ß√£o e o que acontece durante anima√ß√µes. Essa ferramenta est√° dispon√≠vel no [Chrome Developer Tools (DevTools)](https://triangulo.dev/posts/atomo-chrome-developer-tools), na aba **Performance**.\n- [Ferramenta de Rendering do Chrome DevTools](https://triangulo.dev/posts/atomo-ferramenta-rendering-devtools)\n  > A **Ferramenta de Rendering** do [Chrome DevTools](https://triangulo.dev/posts/atomo-chrome-developer-tools) traz op√ß√µes √∫teis para debugar a renderiza√ß√£o de uma p√°gina na web.\n- [Ferramenta de Animations do Chrome DevTools](https://triangulo.dev/posts/atomo-ferramenta-animations-devtools)\n  > A **Ferramenta de Animations** do [Chrome DevTools](https://triangulo.dev/posts/atomo-chrome-developer-tools) permite debugar anima√ß√µes que s√£o executadas em uma p√°gina web. Al√©m de mostrar as anima√ß√µes que ocorreram, voc√™ pode fazer o replay e mudar a velocidade de todas as anima√ß√µes.","src/pages/posts/atomo-chrome-developer-tools/index.mdx","94de4673a1f4504a","animacao-instagram-stories-com-css",{"id":45,"data":47,"body":52,"filePath":53,"digest":54,"deferredRender":24},{"layout":14,"title":48,"description":49,"authorName":17,"authorImage":18,"pubDate":50,"ogImage":51},"Anima√ß√£o dos Stories do Instagram com CSS","Siga este tutorial para criar a anima√ß√£o dos Stories do Instagram com CSS, incluindo dicas para criar elementos 3D com CSS.",["Date","2021-06-08T00:00:00.000Z"],"/posts/animacao-instagram-stories-com-css/social.png","import Iframe from '../../../components/Iframe.astro'\n\nAs anima√ß√µes de intera√ß√£o dos Stories do Instagram s√£o ic√¥nicas. Desde que o Instagram passou a perna no Snapchat e implementou essa fun√ß√£o, parece que quase todos os outros aplicativos seguiram a tend√™ncia. **Talvez** n√£o seja uma boa ideia adicionar Stories no dashboard da firma, mas, se precisar, **aqui vai um tutorial de como criar a anima√ß√£o de transi√ß√£o dos Stories do Instagram usando CSS**.\n\nInteraja com [esse Codepen](https://codepen.io/hugobessaa/pen/RwpybKY) para ver como nosso projeto vai ficar no final. O que no final √© um resultado bem simples, precisou de bastante investiga√ß√£o para chegar em uma solu√ß√£o menos complexa.\n\n  \u003CIframe fullwidth height=\"720\" scrolling=\"no\" title=\"Instagram Stories com CSS (do zero)\" src=\"https://codepen.io/hugobessaa/embed/RwpybKY?height=720&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\nNeste tutorial vamos falar sobre:\n\n- Vari√°veis no CSS;\n- `transform`, `rotate()` e `translate()` para transformar elementos;\n- Renderizar elementos em 3D e ajustar a perspectiva com `transform-style` e `perspective`;\n- Performance de anima√ß√µes e transi√ß√µes CSS;\n- Fun√ß√µes de timing e `cubic-bezier`.\n\n## Adicionando o HTML e CSS iniciais\n\nVamos come√ßar criando [um novo Codepen](https://pen.new/), com esse HTML:\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv class=\"screen\" id=\"screen\" tabindex=\"0\" role=\"button\">\n    \u003Cdiv class=\"stories\">\n      \u003Cdiv class=\"cuboid\">\n        \u003Cdiv class=\"face face--front\">\u003C/div>\n        \u003Cdiv class=\"face face--right\">\u003C/div>\n      \u003C/div>\n    \u003C/div>\n  \u003C/div>\n\u003C/div>\n```\n\nE ent√£o usar esse CSS:\n\n```css\nbody {\n  background: black;\n}\n\n.container {\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n```\n\nNossa estrutura HTML √© bastante simples. O `.container` centraliza os elementos, o `.screen` define os estilos da \"tela\", `.stories` cont√©m os elementos que iremos animar, `.cuboid` √© uma forma geom√©trica 3D e `face` s√£o faces do cuboide com fotos.\n\nNeste tutorial n√£o iremos criar uma anima√ß√£o responsiva, j√° que alguns c√°lculos ficariam muito mais complexos. Por isso, vamos definir duas vari√°veis de tamanho no CSS, `--width` e `--height`.\n\n```css\n:root {\n  --width: 300px;\n  --height: 600px;\n}\n```\n\nCom essas vari√°veis, agora podemos estilizar `.cuboid` e `.face`:\n\n```css\n.cuboid {\n  width: var(--width);\n  height: var(--height);\n  position: relative;\n}\n\n.face {\n  width: var(--width);\n  height: var(--height);\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 16px;\n}\n```\n\nCada `.face` tamb√©m tem sua pr√≥pria classe (`.face--front`, `.face--right`), que iremos estilizar separadamente. Vamos come√ßar definindo as imagens de fundo (com [fotos do nosso querid√≠ssimo Willian Justen](https://unsplash.com/@willianjusten)):\n\n```css\n.face--front {\n  background: url(\"https://images.unsplash.com/photo-1562889858-6c5831947f72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1567&q=80\");\n  background-size: cover;\n  background-position: center;\n}\n\n.face--right {\n  background: url(\"https://images.unsplash.com/photo-1541447237128-f4cac6138fbe?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=918&q=80\");\n  background-size: cover;\n  background-position: center;\n}\n```\n\nCom esse HTML e estilos CSS, j√° temos toda a base para criar a anima√ß√£o dos Stories do Instagram. O projeto agora est√° assim:\n\n![Captura de Tela da estrutura base para criar a anima√ß√£o de Stories do Instagram com CSS](/posts/animacao-instagram-stories-com-css/estrutura-base.png)\n\n## Criando as formas 3D dos elementos com `transform`\n\nCom o que temos at√© aqui, n√£o d√° para fazer nossa anima√ß√£o. Precisamos criar o cuboide. Essa √© a forma 3D que vamos girar durante a anima√ß√£o, para mostrar que voc√™ est√° indo de um Story para o outro.\n\n![Exemplo da anima√ß√£o dos Stories do Instagram que queremos implementar com CSS](/posts/animacao-instagram-stories-com-css/exemplo-animacao-stories-instagram-com-css.png)\n\nN√≥s podemos usar a propriedade `transform` para manipular a posi√ß√£o de cada elemento em 3D. Dentro dela, podemos usar algumas fun√ß√µes de transforma√ß√£o, como [`translateZ`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateZ) e [`rotateY`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateY).\n\nPor padr√£o, os elementos est√£o todos no mesmo plano. Isso quer dizer que eles ser√£o renderizados em 2D, independentemente dos valores de `transform`. Para mudar isso, devemos usar [`transform-style: preserve-3d`](https://developer.mozilla.org/pt-BR/docs/Web/CSS/transform-style).\n\nPara criar nosso cuboide, vamos levar cada uma das faces para sua posi√ß√£o no campo 3D. A posi√ß√£o inicial do elemento `.cuboid` e suas `.face` ser√° o centro da nossa forma geom√©trica 3D.\n\nVamos come√ßar aplicando uma transforma√ß√£o no elemento `.screen` para ser mais f√°cil de visualizar o que estamos construindo:\n\n```css\n.screen {\n  transform: rotateY(-30deg) rotateX(-10deg);\n  transform-style: preserve-3d;\n}\n```\n\nAgora, vamos girar a `.face--right` em 90 graus no eixo vertical para que ela fique perpendicular √† `.face--front`. Como `rotateY(90deg)` gira a partir do centro do elemento, `.face--right` acaba cortando a face frontal ao meio. Para mov√™-la para a lateral, usaremos `transformZ()`.\n\n```css\n.face--right {\n  transform: rotateY(90deg) translateZ(calc(var(--width) / 2));\n  transform-style: preserve-3d;\n  /* ... */\n}\n```\n\nA `.face--front` j√° est√° apontando para o lado correto, mas precisamos lev√°-la para sua posi√ß√£o no eixo Z.\n\n```css\n.face--front {\n  transform: translateZ(calc(var(--width) / 2));\n  transform-style: preserve-3d;\n  /* ... */\n}\n```\n\nNossos elementos agora est√£o na posi√ß√£o correta, mas falta um pouco de perspectiva para que `.cuboid` pare√ßa um elemento 3D de verdade. Com CSS podemos [usar a propriedade `perspective` para definir a dist√¢ncia da perspectiva](#atom-adicionando-perspective-a-elementos-3d-css).\n\n```css\n.screen {\n  perspective: 1600px;\n  /* ... */\n}\n```\n\nA diferen√ßa √© not√°vel!\n\n![Diferen√ßa entre n√£o usar perspective e aplicar perspective: 1600px em um elemento com CSS](/posts/animacao-instagram-stories-com-css/diferenca-perspective-css.png)\n\nNesse tutorial, vamos trabalhar apenas com estas duas faces, mas voc√™ j√° p√¥de come√ßar a entender como completar√≠amos todas as 6 faces do cuboide.\n\n## Animando nossos Stories\n\nNosso tutorial √© sobre usar CSS para criar uma anima√ß√£o, mas vamos precisar de JavaScript para definir a intera√ß√£o do usu√°rio com os Stories.\n\nCada vez que clicamos nos Stories, queremos mostrar o outro lado do cuboide. O c√≥digo JavaScript abaixo vai adicionar a classe `screen--showing-right` ou `screen--showing-front` no elemento `.screen` cada vez que clicarmos nele.\n\n```js\nvar screen = document.getElementById(\"screen\");\n\nscreen.addEventListener(\"click\", function () {\n  if (screen.classList.contains(\"screen--showing-right\")) {\n    screen.classList.add(\"screen--showing-front\");\n    screen.classList.remove(\"screen--showing-right\");\n  } else {\n    screen.classList.add(\"screen--showing-right\");\n    screen.classList.remove(\"screen--showing-front\");\n  }\n});\n```\n\nCom esse c√≥digo, j√° podemos voltar para o CSS.\n\nPodemos definir a rota√ß√£o do `.cuboid` com essas novas classes. Quando `.screen--showing-right` estiver presente, giraremos o elemento para mostrar a `.face--right`. Quando `.screen--showing-front` estiver presente, voltaremos a mostrar a `.face--front`. Para isso, s√≥ precisamos de `rotateY()`.\n\nPara animar a transi√ß√£o entre rota√ß√µes diferentes, basta adicionar um `transition`.\n\n```css\n.cuboid {\n  transform: rotateY(0deg);\n  transform-style: preserve-3d;\n  transition: transform 0.4s;\n  /* ... */\n}\n\n.screen--showing-front .cuboid {\n  transform: rotateY(0deg);\n}\n\n.screen--showing-right .cuboid {\n  transform: rotateY(-90deg);\n}\n```\n\nAgora, quando clicamos nos Stories eles devem girar. Vamos comentar nossa transforma√ß√£o em `.screen` para ver tudo de frente:\n\n```css\n.screen {\n  perspective: 1600px;\n  /* transform: rotateY(-30deg) rotateX(-10deg); */\n  transform-style: preserve-3d;\n}\n```\n\nD√° uma olhada no que construimos at√© agora ([link do Codepen](https://codepen.io/hugobessaa/pen/xxqJLdB)):\n\n  \u003CIframe fullwidth height=\"780\" scrolling=\"no\" title=\"Instagram Stories (parte 1)\" src=\"https://codepen.io/hugobessaa/embed/xxqJLdB?height=780&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n## Ajustando a anima√ß√£o em \"tela cheia\"\n\nSe o elemento `.screen` realmente fosse a tela de um celular, nada que estivesse al√©m das suas bordas apareceria. Para simular isso, vamos adicionar `overflow: hidden`.\n\n```css\n.screen {\n  perspective: 1600px;\n  overflow: hidden;\n}\n```\n\nNosso `.cuboid` agora est√° cortado, j√° que ocupa mais do que o espa√ßo da tela. Isso acontece porque o centro dele est√° no mesmo plano Z que `.screen`, mas suas faces est√£o al√©m.\n\nPara resolver isso, vamos empurrar todo o `.stories` para tr√°s, usando um `translateZ()` negativo na mesma propor√ß√£o que o `translateZ()` da `.face--front`.\n\n```css\n.stories {\n  transform: translateZ(calc(var(--width) / 2 * -1));\n  transform-style: preserve-3d;\n}\n```\n\nEstamos cada vez mais perto da vers√£o final dessa anima√ß√£o, mas ainda temos um problema. O nosso `.cuboid` est√° sendo cortado. Para visualizar esse problema, vamos adicionar um c√≥digo de depura√ß√£o:\n\n```css\n.screen {\n  perspective: 1600px;\n  /* overflow: hidden; */\n\n  transform: rotateX(-40deg);\n  transform-style: preserve-3d;\n\n  position: relative;\n}\n\n.screen:before {\n  content: \"\";\n  display: block;\n  width: var(--width);\n  height: var(--height);\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translateZ(1px);\n  transform-style: preserve-3d;\n  background: repeating-linear-gradient(\n    45deg,\n    #805ad544,\n    #805ad544 10px,\n    #805ad5bb 10px,\n    #805ad5bb 20px\n  );\n}\n```\n\nAgora quando clicamos em `.screen`, nosso `.cuboid` gira e podemos ver que ele corta o plano Z de `.screen`.\n\nUsando a [ferramenta de Animation do Chrome DevTools](https://triangulo.dev/posts/atomo-ferramenta-animations-devtools), podemos tamb√©m diminuir a velocidade da anima√ß√£o para 10%.\n\n  \u003CIframe fullwidth height=\"720\" scrolling=\"no\" title=\"Instagram Stories (debug)\" src=\"https://codepen.io/hugobessaa/embed/OJpwjgb?height=720&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\nIsso acontece porque o elemento `.cuboid` gira em torno do seu eixo Y central.\n\nA dist√¢ncia do centro de `.cuboid` para o centro de `.face--front` √© a mesma dist√¢ncia que movemos `.stories` no eixo Z, o que fez com que `.face--front` ficasse alinhada com `.screen` (destacado em roxo no [Codepen de depura√ß√£o acima](https://codepen.io/hugobessaa/pen/OJpwjgb)).\n\nJ√° a dist√¢ncia do centro `.cuboid` para a lateral de `.face--front` √© **maior**. Enquanto giramos o cuboide, uma parte dele ultrapassa `.screen` e desaparece quando usamos `overflow: hidden`.\n\nPara resolver esse problema, **precisamos aumentar a dist√¢ncia de `.cuboid` para `.screen`** no eixo Z durante a transi√ß√£o.\n\nSua cabe√ßa j√° deve estar um pouco cheia, tentando entender tudo isso, ent√£o vou tentar simplificar. A dist√¢ncia do centro do cuboide para uma de uma de suas arestas verticais √© 140,7% maior do que a dist√¢ncia para o centro de uma de suas faces verticais.\n\nIsso significa que precisamos nos distanciar 40,7% a mais o `.stories` de `.screen` no meio da transi√ß√£o e voltar para a dist√¢ncia original no final.\n\n![Cuboide atravessando o elemento .screen ao ser rotacionado](/posts/animacao-instagram-stories-com-css/cuboid-atravessando-screen.svg)\n\nComo transi√ß√µes no CSS n√£o aceitam valores intermedi√°rios, precisaremos usar `animation`. Nesta anima√ß√£o, come√ßaremos na dist√¢ncia que `.stories` j√° estava de `.screen`, aumentando para um valor 40,7% maior no meio da anima√ß√£o e terminando na dist√¢ncia que come√ßamos.\n\n```css\n@keyframes translate-z-1 {\n  to,\n  from {\n    transform: translateZ(calc(var(--width) / 2 * -1));\n  }\n\n  50% {\n    transform: translateZ(calc(var(--width) / 2 * -1.407));\n  }\n}\n\n@keyframes translate-z-2 {\n  to,\n  from {\n    transform: translateZ(calc(var(--width) / 2 * -1));\n  }\n\n  50% {\n    transform: translateZ(calc(var(--width) / 2 * -1.407));\n  }\n}\n```\n\nN√£o existe uma forma de recome√ßar uma anima√ß√£o CSS no clique sem escrever mais JavaScript, ent√£o precisamos mudar entre duas similares conforme mudamos as classes de `.screen`.\n\nCom essas anima√ß√µes no nosso CSS, basta usar `animation` em `.stories`:\n\n```css\n.screen--showing-front .stories {\n  animation: translate-z-1 0.4s;\n}\n\n.screen--showing-right .stories {\n  animation: translate-z-2 0.4s;\n}\n```\n\nQuase l√°.\n\nAgora, `.cuboid` atravessa menos `.screen`, mas ainda atravessa. Al√©m disso, no final da anima√ß√£o `.cuboid` parece se afastar mais do que deveria da tela.\n\n![Story ainda atravessando .screen](/posts/animacao-instagram-stories-com-css/story-ainda-atravessando-screen.png)\n\nL√° vamos n√≥s de novo para a trigonometria. Por padr√£o, os valores das propriedades durante a anima√ß√£o mudam de acordo com o que chamamos de **fun√ß√£o de timing**. Com uma fun√ß√£o de timing podemos alterar a mudan√ßa para ser linear, suave, abrupta ou seguir curvas de diferentes fun√ß√µes matem√°ticas.\n\nSe n√£o definirmos a [`animation-timing-function`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function), ela ser√° `ease`. Al√©m das fun√ß√µes pr√©-definidas (`ease`, `ease-in-out`, `steps()`), podemos usar `cubic-bezier()` para definir a curva dos valores.\n\nFique a vontade para explorar [`cubic-bezier()` no MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Tools/Cubic_Bezier_Generator) e entender como funciona.\n\nA dist√¢ncia que precisamos nos afastar de `.screen` muda no ritmo de uma curva de fun√ß√£o de seno. Lembra de seno? Bom, deve ser suficiente para voc√™ saber que podemos expressar essa curva com ` cubic-bezier(0.37, 0, 0.63, 1)` (retirado de [easings.net](https://easings.net/#easeInOutSine)).\n\nEnt√£o, vamos adicionar essa fun√ß√£o de timing em todas as nossas anima√ß√µes e transi√ß√µes:\n\n```css\n.screen--showing-front .stories {\n  animation: translate-z-1 0.4s cubic-bezier(0.37, 0, 0.63, 1);\n}\n\n.screen--showing-right .stories {\n  animation: translate-z-2 0.4s cubic-bezier(0.37, 0, 0.63, 1);\n}\n\n.cuboid {\n  transform: rotateY(0deg);\n  transform-style: preserve-3d;\n  transition: transform 0.4s cubic-bezier(0.37, 0, 0.63, 1);\n\n  width: var(--width);\n  height: var(--height);\n  position: relative;\n}\n```\n\n**Essa foi a √∫ltima li√ß√£o de trigonometria deste post**.\n\nD√° uma olhada no que construimos at√© agora, [neste Codepen](https://codepen.io/hugobessaa/pen/wvJxqPd):\n\n  \u003CIframe fullwidth height=\"720\" scrolling=\"no\" title=\"Instagram Stories (parte 2)\" src=\"https://codepen.io/hugobessaa/embed/wvJxqPd?height=720&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n## Toques finais para uma anima√ß√£o de Stories perfeita\n\nA nossa anima√ß√£o agora est√° praticamente perfeita. Vamos remover o c√≥digo de `.stories:before` e simplificar os estilos de `.screen`:\n\n```css\n.screen {\n  perspective: 1600px;\n  overflow: hidden;\n}\n```\n\nO toque que precisamos √© escurecer as `.face` que n√£o estar√£o mais de frente durante a transi√ß√£o. Faremos isso com `opacity`.\n\n```css\n.face {\n  /* ...  */\n  transition: opacity 0.4s;\n}\n\n.screen--showing-right .face--front {\n  opacity: 0.5;\n}\n\n.screen--showing-front .face--right {\n  opacity: 0.5;\n}\n```\n\nPara finalizar, vamos esconder a parte de tras das `.face` durante a transi√ß√£o\n\n```css\n.face {\n  /* ...  */\n  backface-visibility: hidden;\n}\n```\n\nPronto! Nossa anima√ß√£o est√° completa.\n\n## Anima√ß√£o Stories completa e o que aprendemos at√© aqui\n\nSem mais delongas, aqui est√° o Codepen com a anima√ß√£o completa do Stories do Instagram feita _quase s√≥_ com CSS.\n\n  \u003CIframe fullwidth height=\"720\" scrolling=\"no\" title=\"Instagram Stories com CSS (do zero)\" src=\"https://codepen.io/hugobessaa/embed/RwpybKY?height=720&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\nPara chegar at√© aqui, precisamos aprender sobre:\n\n- Eixos de transforma√ß√£o do `translate()` e `rotate()`;\n- Elementos em 3D com `transform-style: preserve-3d` e `perspective`;\n- Anima√ß√µes e transi√ß√µes;\n- Fun√ß√µes de Timing;\n- `backface-visibility`.\n\nCom esse conhecimento, podemos usar um pouco de JavaScript para transformar esse prot√≥tipo em um componente real em uma webapp, ou ir mais al√©m e criar novas intera√ß√µes em 3D em nossos projetos.\n\nComo animamos apenas `transform` e `opacity`, essas anima√ß√µes rodam muito bem em quase todos os dispositivos.\n\nSe voc√™ quiser continuar aprendendo sobre anima√ß√µes, recomendo outros dois posts aqui do Tri√¢ngulo:\n\n- [Criando anima√ß√µes perfeitas com CSS animation e transition](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css)\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n\nBons estudos.","src/pages/posts/animacao-instagram-stories-com-css/index.mdx","bf42931b1e3e182a","atomo-debugar-chrome-do-android-devtools",{"id":55,"data":57,"body":62,"filePath":63,"digest":64,"deferredRender":24},{"layout":14,"title":58,"description":59,"authorName":17,"authorImage":18,"pubDate":60,"ogImage":61},"Como debugar o Chrome no Android usando o DevTools","A partir do Chrome no seu computador, voc√™ pode debugar um site aberto em um dispositivo Android utilizando o Chrome DevTools.",["Date","2021-05-26T00:00:00.000Z"],"/posts/atomo-debugar-chrome-do-android-devtools/social.png","A partir do Chrome no seu computador, **voc√™ pode debugar um site aberto em um dispositivo Android** utilizando o [Chrome DevTools](https://triangulo.dev/posts/atomo-chrome-developer-tools). Para isso:\n\n1. Primeiro, habilite o as Op√ß√µes de Desenvolvedor no seu Android;\n1. V√° at√© as op√ß√µes em **Configura√ß√µes**, **Sistema**, **Op√ß√µes do Desenvolvedor**;\n1. Ative a Depura√ß√£o USB;\n1. No seu computador, abra o Chrome;\n1. Acesse `chrome://inspect#devices`;\n1. Habilite a op√ß√£o de \"Discover USB devices\";\n1. Conecte o seu dispositivo Android ao seu computador por um cabo USB;\n1. Voc√™ deve agora conseguir ver o seu celular na lista de dispositivos;\n   ![Captura de tela (screenshot) da p√°gina de inspe√ß√£o remota do Chrome DevTools](/posts/atomo-debugar-chrome-do-android-devtools/screenshot-inspecao-remota-android-devtools.png)\n1. Se o seu dispositivo aparecer como offline, permita a depura√ß√£o USB no Android;\n1. Voc√™ pode agora clicar em \"inspect\" em alguma das abas listadas.\n\n## Refer√™ncias\n\n- [Chrome DevTools - Remote debug Android devices (developers.chrome.com)](https://developer.chrome.com/docs/devtools/remote-debugging/)\n\n## Backlinks\n\n- [Criando anima√ß√µes perfeitas com CSS animation e transition](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css)\n  > Teste o exemplo em um celular Android [debugando pelo Chrome DevTools](https://triangulo.dev/posts/atomo-debugar-chrome-do-android-devtools).\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n  > [...] Para nossos pr√≥ximos testes, vou rodar o Codepen em um **Pixel 3a** e [debugar remotamente pelo USB](https://triangulo.dev/posts/atomo-debugar-chrome-do-android-devtools) utilizando o [CPU Throttling da aba de Performance](https://triangulo.dev/posts/atomo-cpu-throttling-chrome-devtools)","src/pages/posts/atomo-debugar-chrome-do-android-devtools/index.mdx","3bbf5d0870b6447d","atomo-ferramenta-animations-devtools",{"id":65,"data":67,"body":72,"filePath":73,"digest":74,"deferredRender":24},{"layout":14,"title":68,"description":69,"authorName":17,"authorImage":18,"pubDate":70,"ogImage":71},"Ferramenta de Animations do Chrome DevTools","A Ferramenta de Animations do Chrome DevTools permite debugar anima√ß√µes que s√£o executadas em uma p√°gina web.",["Date","2021-05-27T00:00:00.000Z"],"/posts/atomo-ferramenta-animations-devtools/social.png","A **Ferramenta de Animations** do [Chrome DevTools](https://triangulo.dev/posts/atomo-chrome-developer-tools) permite debugar anima√ß√µes que s√£o executadas em uma p√°gina web. Al√©m de mostrar as anima√ß√µes que ocorreram, voc√™ pode fazer o replay e mudar a velocidade de todas as anima√ß√µes.\n\nPara abrir a ferramenta de Rendering, clique no **Menu ...** do DevTools, **More tools**, **Animations**.\n\n![Captura de tela (screenshot) da ferramenta de Animations do Chrome DevTools no macOS](/posts/atomo-ferramenta-animations-devtools/ferramenta-animations-devtools.png)\n\n## Refer√™ncias\n\n- [Inspect Animations (developer.chrome.com)](https://developer.chrome.com/docs/devtools/css/animations/)\n\n## Cita√ß√µes\n\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n  > Se voc√™ quiser analisar as anima√ß√µes, mas acha que elas est√£o muito r√°pidas, o DevTools t√™m tamb√©m a [**ferramenta de Animations**](https://triangulo.dev/posts/atomo-ferramenta-animations-devtools) que deixa voc√™ diminuir a velocidade de todas as anima√ß√µes.\n- [Anima√ß√£o dos Stories do Instagram com CSS](https://triangulo.dev/posts/animacao-instagram-stories-com-css)\n  > Usando a [ferramenta de Animation do Chrome DevTools](https://triangulo.dev/posts/atomo-ferramenta-animations-devtools), podemos tamb√©m diminuir a velocidade da anima√ß√£o para 10%.","src/pages/posts/atomo-ferramenta-animations-devtools/index.mdx","cc1c165e650a05f1","atomo-cpu-throttling-chrome-devtools",{"id":75,"data":77,"body":82,"filePath":83,"digest":84,"deferredRender":24},{"layout":14,"title":78,"description":79,"authorName":17,"authorImage":18,"pubDate":80,"ogImage":81},"Configurando o CPU Throttling no Chrome DevTools","Simule dispositivos com menos capacidade de processamento com o CPU Throttling do Chrome DevTools",["Date","2021-05-26T00:00:00.000Z"],"/posts/atomo-cpu-throttling-chrome-devtools/social.png","Seu computador nem sempre tem a performance parecida com os dispositivos que usar√£o em produ√ß√£o o site ou webapp que voc√™ est√° desenvolvendo. Para simular dispositivos com menos capacidade de processamento, use a funcionalidade de **CPU Throttling** da [aba de Performance do Chrome DevTools](https://triangulo.dev/posts/atomo-aba-performance-devtools).\n\nPara acessar a aba de Performance, basta abrir o DevTools em **Menu ...**, **Mais Ferramentas**, **Ferramentas do Desenvolvedor**, e clicar na aba **Performance**. L√°, clique na **Engrenagem de Configura√ß√µes** e defina o **CPU Throttling**.\n\n![Captura de tela (screenshot) da aba de performance selecionando as op√ß√µes de CPU Throttling](/posts/atomo-cpu-throttling-chrome-devtools/performance-chrome-devtools-cpu-throttling.png)\n\n## Refer√™ncias\n\n- [Chrome DevTools - Analyze runtime performance (developers.chrome.com)](https://developer.chrome.com/docs/devtools/evaluate-performance/)\n\n## Backlinks\n\n- [Criando anima√ß√µes perfeitas com CSS animation e transition](https://triangulo.dev/posts/criando-animacoes-perfeitas-com-css)\n  > Teste o exemplo em um celular Android [debugando pelo Chrome DevTools](https://triangulo.dev/posts/atomo-debugar-chrome-do-android-devtools).\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n  > [...] Para nossos pr√≥ximos testes, vou rodar o Codepen em um **Pixel 3a** e [debugar remotamente pelo USB](https://triangulo.dev/posts/atomo-debugar-chrome-do-android-devtools) utilizando o [CPU Throttling da aba de Performance](https://triangulo.dev/posts/atomo-cpu-throttling-chrome-devtools)","src/pages/posts/atomo-cpu-throttling-chrome-devtools/index.mdx","1e5c8d6fd8a8b925","atomo-como-criar-cubo-css",{"id":85,"data":87,"body":92,"filePath":93,"digest":94,"deferredRender":24},{"layout":14,"title":88,"description":89,"authorName":17,"authorImage":18,"pubDate":90,"ogImage":91},"Como criar um cubo (3D) com CSS","Usando a propriedade transform, podemos criar formas em 3D como um cubo, apenas com CSS. Aprenda como.",["Date","2021-06-14T00:00:00.000Z"],"/posts/atomo-como-criar-cubo-css/social.png","import Iframe from '../../../components/Iframe.astro'\n\nPara criar um cubo (3D) com CSS, usaremos a propriedade `transform` para posicionar cada lado do cubo em tr√™s dimens√µes.\n\nA propriedade `transform` recebe como valor algumas fun√ß√µes que transformam o posicionamento e a forma de um elemento com CSS.\n\nPara criar nosso cubo, come√ßaremos com o HTML.\n\n```html\n\u003Cdiv class=\"cube\">\n  \u003Cdiv class=\"face face--front\">Front\u003C/div>\n  \u003Cdiv class=\"face face--right\">Right\u003C/div>\n  \u003Cdiv class=\"face face--back\">Back\u003C/div>\n  \u003Cdiv class=\"face face--left\">Left\u003C/div>\n  \u003Cdiv class=\"face face--top\">Top\u003C/div>\n  \u003Cdiv class=\"face face--bottom\">Bottom\u003C/div>\n\u003C/div>\n```\n\nNesse HTML temos o elemento `.cube`, que ser√° o nosso cubo e cada uma de suas faces (`.face`).\n\nPara melhor visualizar nosso cubo, vamos adicionar alguns estilos b√°sicos ao elementos na p√°gina.\n\n```css\nbody {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n}\n\n.face {\n  background: linear-gradient(45deg, #4fd1c522, #4fd1c5cc);\n  border: 2px solid #4fd1c5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  font-size: 50px;\n  font-weight: bold;\n  color: #234e52;\n}\n```\n\nTamb√©m precisamos definir o tamanho do nosso cubo. Neste exemplo, vamos usar `200px`.\n\n```css\n.cube {\n  width: 200px;\n  height: 200px;\n}\n\n.face {\n  /* ... */\n  width: 200px;\n  height: 200px;\n}\n```\n\nAgora podemos come√ßar a posicionar os elementos em tr√™s dimens√µes. Para deixar todas as `.face` na mesma posi√ß√£o inicial, usaremos `position: absolute`.\n\n```css\n.face {\n  /* ... */\n  position: absolute;\n}\n```\n\nTodas as `.face` est√£o no mesmo plano, mas para criar um cubo, precisamos gir√°-las e posicion√°-las em seu lugar. Em um cubo de 200px de largura, todas as faces est√£o 100px de dist√¢ncia do centro.\n\nCom `transform`, podemos usar `translateX()`, `translateY()` e `translateZ()`. Essas fun√ß√µes mudam a posi√ß√£o do elemento em cada um dos tr√™s eixos X, Y e Z. Tamb√©m podemos usar `rotateX()` e `rotateY()`, para girar os elementos em torno de seus eixos X e Y.\n\n![Diagrama com a posi√ß√£o dos eixos X, Y e Z em um elemento em 3D](/posts/atomo-como-criar-cubo-css/eixos-3d-css.svg)\n\nA `.face--front` ser√° a face da frente do cubo:\n\n```css\n.face--front {\n  transform: translateZ(100px);\n}\n```\n\nAs outras faces precisar√£o ser giradas para suas posi√ß√µes. `.face--right`, `.face--back` e `.face--left` giram em torno do seu eixo Y:\n\n```css\n.face--right {\n  transform: rotateY(90deg) translateZ(100px);\n}\n\n.face--back {\n  transform: rotateY(180deg) translateZ(100px);\n}\n\n.face--left {\n  transform: rotateY(-90deg) translateZ(100px);\n}\n```\n\nPara conseguir visualizar o que estamos construindo, vamos tamb√©m aplicar uma rota√ß√£o ao `.cube`, para ver as faces em perspectiva. Para preservar o posicionamento em 3D dos elementos, precisamos tamb√©m usar [`transform-style: preserve-3d;`](#todo-transform-style-3d-mdn).\n\n```css\n.cube {\n  /* ... */\n  transform: rotateX(-20deg) rotateY(-10deg);\n  transform-style: preserve-3d;\n}\n```\n\n![Imagem do que criamos at√© o momento no post, um cubo com duas faces ainda por posicionar.](/posts/atomo-como-criar-cubo-css/cubo-semi-preparado.png)\n\nAgora, precisamos posicionar `.face--top` e `.face--bottom`. Como elas ficar√£o posicionada para cima e para baixo, usaremos `rotateX()` para gir√°-las em torno do eixo X.\n\n```css\n.face--top {\n  transform: rotateX(90deg) translateZ(100px);\n}\n\n.face--bottom {\n  transform: rotateX(-90deg) translateZ(100px);\n}\n```\n\nPronto, agora criamos um cubo com CSS.\n\nSe voc√™ quiser adicionar um pouco de perspectiva 3D aos elementos, voc√™ pode usar `perspective: 500px` em `body`.\n\nCom o cubo que criamos, podemos tamb√©m fazer uma anima√ß√£o de rota√ß√£o, para mostrar todas as faces do cubo. Fique √† vontade para [explorar o Codepen que criei](https://codepen.io/hugobessaa/pen/xxqQMZy) para acompanhar esse post.\n\n\u003CIframe fullwidth height=\"500\" scrolling=\"no\" title=\"Cubo (Finalizado)\" src=\"https://codepen.io/hugobessaa/embed/xxqQMZy?height=500&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n## Refer√™ncias\n\n- [perspective (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/CSS/perspective)","src/pages/posts/atomo-como-criar-cubo-css/index.mdx","4e335d9d8346cefc","atomo-ferramenta-rendering-devtools",{"id":95,"data":97,"body":102,"filePath":103,"digest":104,"deferredRender":24},{"layout":14,"title":98,"description":99,"authorName":17,"authorImage":18,"pubDate":100,"ogImage":101},"Ferramenta de Rendering do Chrome DevTools","A Ferramenta de Rendering do Chrome DevTools traz op√ß√µes √∫teis para debugar a renderiza√ß√£o de uma p√°gina na web.",["Date","2021-05-27T00:00:00.000Z"],"/posts/atomo-ferramenta-rendering-devtools/social.png","A **Ferramenta de Rendering** do [Chrome DevTools](https://triangulo.dev/posts/atomo-chrome-developer-tools) traz op√ß√µes √∫teis para debugar a renderiza√ß√£o de uma p√°gina na web.\n\nPara abrir a ferramenta de Rendering, clique no **Menu ...** do DevTools, **More tools**, **Rendering**.\n\nAs ferramentas dispon√≠veis s√£o:\n\n- **Paint Flashing**: destaca as √°reas da p√°gina que precisaram de repaint;\n- **Layout Shift Regions**: destaca as √°reas da p√°gina que se deslocaram devido a [Layout Shift](https://triangulo.dev/posts/atomo-layout-shift);\n- **Layer Borders**: sinaliza as bordas de camadas e tiles;\n- **Frame Rendering Stats**: mostra estat√≠sticas de renderiza√ß√£o de frame em tempo-real, com medidor de fps e uso da GPU;\n- **Scrolling Performance Issues**: destaca elementos que podem diminuir a velocidade de rolagem, includindo eventos de toque e rolagem ou outros problemas de rolagem na thread principal;\n- **Highlight ad frames**: destaca frames detectados como propaganda;\n- **Hit-test borders**: mostra as bordas de regi√µes de hit-test;\n- **Core Web Vitals**: mostra m√©tricas da Core Web Vitals sobrepostas no site;\n- **Disable local fonts**: desabilita `local()` em `@font-face`;\n- **Emulate a focused page**: emula uma p√°gina focada;\n- **Emulate CSS media**: op√ß√µes para emular `media type`, `prefers-color-scheme`, `prefers-reduced-motion` e `color-gamut`;\n- **Emulate vision deficiencies**: op√ß√µes para visualizar uma p√°gina como uma pessoa com defici√™ncias visuais como vis√£o turva e diferentes tipos de daltonismo.\n- **Disable AVIF image format**: desabilita o tipo de imagem AVIF;\n- **Disable WebP image format**: desabilita o tipo de imagem WebP;\n\n![Exemplo de Paint Flashing e Frame Rendering Stats ativado](/posts/atomo-ferramenta-rendering-devtools/paint-flashing-frame-rendering-stats.gif)\n\n## Cita√ß√µes\n\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n  > A primeira delas √© a [ferramenta de Rendering](https://triangulo.dev/posts/atomo-ferramenta-rendering-devtools). Ela nos possibilita visualizar coisas como:","src/pages/posts/atomo-ferramenta-rendering-devtools/index.mdx","5b824f419983b2de","atomo-aba-performance-devtools",{"id":105,"data":107,"body":112,"filePath":113,"digest":114,"deferredRender":24},{"layout":14,"title":108,"description":109,"authorName":17,"authorImage":18,"pubDate":110,"ogImage":111},"Aba de Performance do Chrome DevTools","A aba de Performance do Chrome DevTools permite que voc√™ crie relat√≥rios para analisar v√°rios aspectos do seu site.",["Date","2021-05-26T00:00:00.000Z"],"/posts/atomo-aba-performance-devtools/social.png","A **Aba de Performance** do Chrome DevTools permite que voc√™ crie relat√≥rios para analisar v√°rios aspectos do seu site, como:\n\n- Performance de renderiza√ß√£o da p√°gina;\n- Problemas de Layout Shift e Layout Thrashing;\n- Utiliza√ß√£o de mem√≥ria para analisar memory leaks;\n- Utiliza√ß√£o da rede durante a grava√ß√£o do relat√≥rio;\n- M√©tricas do Web Vitals.\n\n![Captura de Tela (screenshot) da aba de Performance do Chrome Developer Tools (Ferramentas do Desenvolvedor) em um computador macOS](/posts/atomo-aba-performance-devtools/performance-chrome-devtools.png)\n\nPara acessar a aba de Performance, basta abrir o DevTools em **Menu ...**, **Mais Ferramentas**, **Ferramentas do Desenvolvedor**, e clicar na aba **Performance**.\n\n## Refer√™ncias\n\n- [Chrome DevTools - Analyze runtime performance (developers.chrome.com)](https://developer.chrome.com/docs/devtools/evaluate-performance/)\n\n## Backlinks\n\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n  > [...] E para esse problema, o [DevTools do Chrome](https://triangulo.dev/posts/atomo-chrome-developer-tools) tem uma ferramenta muito √∫til para n√≥s: [a aba de Performance](https://triangulo.dev/posts/atomo-aba-performance-devtools).\n- [Configurando o CPU Throttling no Chrome DevTools](https://triangulo.dev/posts/atomo-cpu-throttling-chrome-devtools)\n  > [...] Para simular dispositivos com menos capacidade de processamento, use a funcionalidade de **CPU Throttling** da [aba de Performance do Chrome DevTools](https://triangulo.dev/posts/atomo-aba-performance-devtools).","src/pages/posts/atomo-aba-performance-devtools/index.mdx","1906aa29eba81d59","atomo-layout-shift",{"id":115,"data":117,"body":122,"filePath":123,"digest":124,"deferredRender":24},{"layout":14,"title":118,"description":119,"authorName":17,"authorImage":18,"pubDate":120,"ogImage":121},"Layout Shift","Layout Shift √© o deslocamento do layout do site conforme recursos s√£o carregados ou altera√ß√µes s√£o executadas no navegador",["Date","2021-05-27T00:00:00.000Z"],"/posts/atomo-layout-shift/social.png","**Layout Shift** √© o deslocamento do layout do site conforme recursos s√£o carregados ou altera√ß√µes s√£o executadas no navegador. Layout Shifts s√£o indesejados em grande parte dos casos, j√° que eles podem sobrecarregar o processamento ativando c√°lculos de layout e paint, mas tamb√©m porque representam uma m√° experi√™ncia para o usu√°rio.\n\n![Exemplo de Layout Shift](/posts/atomo-layout-shift/exemplo-de-layout-shift.png)\n\nCausas comuns de Layout Shift s√£o:\n\n- Imagens sem tamanho (`width` e `height`) definidos antes de carregarem;\n- Mudan√ßas em `padding` e `margin`;\n- Carregamento ass√≠ncrono de JavaScript que altera o DOM;\n- Propagandas mal-aplicadas na p√°gina.\n\n## Refer√™ncias\n\n- [Cumulative Layout Shift (web.dev)](https://web.dev/cls/)\n\n## Cita√ß√µes\n\n- [Analisando a Performance de Anima√ß√µes CSS com o DevTools](https://triangulo.dev/posts/analisando-performance-chrome-devtools)\n  > Na abertura do menu, muitos [Layout Shifts](https://triangulo.dev/posts/atomo-layout-shift) e c√°lculos de layout e paint.","src/pages/posts/atomo-layout-shift/index.mdx","43a4c14e451ad7b0","css-grid-o-que-voce-precisa-saber",{"id":125,"data":127,"body":132,"filePath":133,"digest":134,"deferredRender":24},{"layout":14,"title":128,"description":129,"authorName":17,"authorImage":18,"pubDate":130,"ogImage":131},"CSS Grid: o b√°sico que voc√™ precisa saber (com exemplos)","CSS Grid √© a ferramenta mais poderosa para criar layouts com CSS. Aprenda como utiliz√°-la com exemplos pr√°ticos e visuais.",["Date","2020-11-09T22:04:00.000Z"],"/posts/css-grid-o-que-voce-precisa-saber/social.png","Hoje usamos CSS para estilizar layouts muito diferentes do que imagin√°vamos na √©poca que a web foi criada. De tabelas para divs, de floats para Flexbox, as ferramentas dispon√≠veis para criarmos layouts na web evolu√≠ram muito desde os anos 90. Agora, CSS Grid j√° √© suportado em todos os navegadores mais atuais e podemos dizer com seguran√ßa que esse √© o m√©todo de layout mais poderoso que j√° foi adicionado ao CSS.\n\nO CSS Grid, ao contr√°rio da maioria das outras t√©cnicas para construir layouts, foi criado especificamente para possibilitar os layouts em duas dimens√µes (2D) que queremos implementar em nossos sites. Juntando cada uma das novas propriedades adicionadas ao CSS, podemos escrever um c√≥digo de estilos muito claro e intencional. Al√©m disso, os novos conceitos adicionados nos permitem implementar alguns layouts bastante complexos sem perdermos a cabe√ßa ou usarmos v√°rios hacks.\n\nPara criar um cont√™iner grid, basta usar `display: grid`. Em um cont√™iner grid, todos os seus filhos diretos se tornam itens grid. Com um cont√™iner grid em m√£os podemos come√ßar a criar layouts usando colunas e linhas.\n\nNeste primeiro exemplo, criaremos uma `div` com a classe `container` com seis elementos dentro.\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv>Um\u003C/div>\n  \u003Cdiv>Dois\u003C/div>\n  \u003Cdiv>Tr√™s\u003C/div>\n  \u003Cdiv>Quatro\u003C/div>\n  \u003Cdiv>Cinco\u003C/div>\n  \u003Cdiv>Seis\u003C/div>\n\u003C/div>\n```\n\nUsando `display: grid`, transformaremos esta `div` em um cont√™iner grid.\n\n```css\n.container {\n  display: grid;\n}\n```\n\nAgora, cada um dos seis elementos que est√£o dentro do nosso cont√™iner s√£o itens grid. Por padr√£o, temos apenas uma coluna, acompanhada de linhas criadas automaticamente para cada elemento. Nada muito diferente do que ver√≠amos em uma `div` normal.\n\n![Grid com valores padr√£o](/posts/css-grid-o-que-voce-precisa-saber/grid-com-valores-padrao.svg)\n\n## √çndice\n\n## Trabalhando com colunas usando grid-template-columns\n\nPara criar colunas, usaremos a propriedade `grid-template-columns`, que recebe os valores de tamanho de cada coluna separados por espa√ßo. Podemos, por exemplo, criar duas colunas com `200px` cada.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 200px 200px;\n}\n```\n\nAgora, todos os nossos elementos estar√£o distribu√≠dos entre duas colunas de um tamanho fixo. Usando `grid-template-columns` podemos implementar muitos outros layouts, misturando diferentes valores de tamanho.\n\n![Cont√™iner grid com grid-template-columns: 200px 200px](/posts/css-grid-o-que-voce-precisa-saber/grid-template-columns-200-200.svg)\n\nPodemos, por exemplo, criar um layout em que a primeira coluna ocupa um espa√ßo fixo e a segunda ocupa todo o resto do espa√ßo dispon√≠vel. Isto √© poss√≠vel usando a unidade `fr`, introduzida exatamente para ser utilizada como valor de tamanho para linhas e colunas em cont√™ineres grid.\n\n```css\n.container {\n  display: grid;\n  width: 500px;\n  grid-template-columns: 150px 1fr;\n}\n```\n\n![Cont√™iner grid com grid-template-columns: 150px 1fr](/posts/css-grid-o-que-voce-precisa-saber/grid-template-columns-150-1fr.svg)\n\nA unidade `fr` representa uma **fr**a√ß√£o do espa√ßo livre dispon√≠vel em uma linha ou coluna. Podemos misturar diversos valores `fr` para formar layouts autom√°ticos que respeitam certas propor√ß√µes.\n\n```css\n.container {\n  display: grid;\n  width: 500px;\n  grid-template-columns: 2fr 1fr;\n}\n```\n\nNo exemplo acima, todo o espa√ßo dispon√≠vel ser√° dividido entre duas colunas: a primeira ter√° o tamanho de 2/3 o espa√ßo total dispon√≠vel e a segunda 1/3.\n\n![Cont√™iner grid com `grid-template-columns: 2fr 1fr`](/posts/css-grid-o-que-voce-precisa-saber/grid-template-columns-2fr-1fr.svg)\n\n## Criando linhas com CSS Grid (grid-template-rows)\n\nAt√© agora trabalhamos apenas com colunas. Mas o real poder do CSS Grid se mostra quando usamos linhas e colunas em conjunto.\n\nPara definir linhas no CSS Grid podemos usar a propriedade `grid-template-rows`. Da mesma forma que declaramos colunas com `grid-template-columns`, declararemos linhas usando valores separados por espa√ßo.\n\n```css\n.container {\n  display: grid;\n  height: 300px;\n  grid-template-rows: 3fr 1fr 3fr;\n}\n```\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv>Um\u003C/div>\n  \u003Cdiv>Dois\u003C/div>\n  \u003Cdiv>Tr√™s\u003C/div>\n\u003C/div>\n```\n\nDentro do nosso cont√™iner grid agora teremos 3 linhas declaradas com os valores de `3fr`, `1fr` e `3fr`. Assim como nossas colunas, o tamanho das linhas que acabamos de criar no nosso cont√™iner grid preenchem o espa√ßo dispon√≠vel proporcionalmente.\n\nJuntando `grid-template-columns` com `grid-template-rows`, criaremos nosso primeiro cont√™iner grid em duas dimens√µes.\n\n```css\n.container {\n  display: grid;\n  width: 500px;\n  height: 300px;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 1fr 50px 1fr;\n}\n```\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv>Um\u003C/div>\n  \u003Cdiv>Dois\u003C/div>\n  \u003Cdiv>Tr√™s\u003C/div>\n  \u003Cdiv>Quatro\u003C/div>\n  \u003Cdiv>Cinco\u003C/div>\n  \u003Cdiv>Seis\u003C/div>\n\u003C/div>\n```\n\n![Cont√™iner grid com duas colunas e tr√™s linhas](/posts/css-grid-o-que-voce-precisa-saber/grid-template-columns-rows.svg)\n\nAgora temos a combina√ß√£o de duas colunas de tamanhos `2fr` e `1fr` com tr√™s linhas de tamanhos `1fr`, `100px` e `1fr`. Com apenas tr√™s declara√ß√µes CSS, conseguimos criar um layout altamente flex√≠vel e bastante dif√≠cil de replicar com qualquer outra t√©cnica CSS. **√â na combina√ß√£o de colunas, linhas e tamanhos flex√≠veis que CSS Grid se destaca de tudo o que j√° existiu** e p√µe na m√£o das pessoas que desenvolvem um poder imenso para criar layouts.\n\n## Adicionando espa√ßo entre itens grid com gap\n\nMas‚Ä¶ e se quis√©ssemos adicionar um espa√ßo entre todas essas linhas e colunas? Normalmente conhecido como ‚Äúgutter‚Äù, esse espa√ßo pode ser declarado usando a propriedade `gap`.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 1fr 100px 1fr;\n  gap: 20px;\n}\n```\n\n`gap` √© uma forma abreviada de declarar os valores de `row-gap` (que define o espa√ßo entre linhas) e `column-gap` (que define o espa√ßo entre colunas). Para declarar valores diferentes podemos adicionar um segundo valor de tamanho (`gap: 20px 10px`) ou ent√£o escrever `row-gap: 20px` e `column-gap: 10px` separadamente.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-template-rows: 1fr 100px 2fr;\n\n  gap: 20px 10px;\n  /* ou ent√£o */\n  row-gap: 20px;\n  column-gap: 10px;\n}\n```\n\n![Cont√™iner grid com `gap: 20px 10px;`](/posts/css-grid-o-que-voce-precisa-saber/gap-20px-10px.svg)\n\nUsando apenas essas tr√™s propriedades, podemos implementar uma quantidade gigantesca de interfaces de usu√°rio que antes envolveriam muito mais trabalho manual.\n\n# Explorando a grid impl√≠cita com grid-auto-rows e grid-auto-columns\n\nNem sempre todo o conte√∫do de um cont√™iner grid ser√° previs√≠vel. E se tiv√©ssemos uma lista din√¢mica? Come√ßaremos vendo o que acontece quando temos mais itens do que o nosso conjunto de linhas e colunas comporta.\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv>Um\u003C/div>\n  \u003Cdiv>Dois\u003C/div>\n  \u003Cdiv>Tr√™s\u003C/div>\n  \u003Cdiv>Quatro\u003C/div>\n  \u003Cdiv>Cinco\u003C/div>\n  \u003Cdiv>Seis\u003C/div>\n\n  \u003C!-- elementos extra -->\n  \u003Cdiv>Sete\u003C/div>\n  \u003Cdiv>Oito\u003C/div>\n  \u003Cdiv>Nove\u003C/div>\n\u003C/div>\n```\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 1fr 100px 1fr;\n  gap: 10px;\n}\n```\n\n![Elementos \"Sete\", \"Oito\" e \"Nove\" na grid impl√≠cita](/posts/css-grid-o-que-voce-precisa-saber/grid-implicita.svg)\n\nOs elementos ‚ÄúSete‚Äù, ‚ÄúOito‚Äù e ‚ÄúNove‚Äù continuam organizados em colunas como os anteriores, mas eles j√° n√£o seguem as mesmas regras para o tamanho das linhas. Isso acontece porque quando temos mais elementos do que c√©lulas no nosso cont√™iner grid, os elementos que sobram criam novas c√©lulas impl√≠citas que ocupam as colunas dispon√≠veis e criam novas linhas que n√£o tinham sido declaradas.\n\nO DevTools (ferramentas de desenvolvimento) do Firefox nos permite ver exatamente o que est√° acontecendo por baixo dos panos.\n\n![Firefox DevTools com grid impl√≠cita](/posts/css-grid-o-que-voce-precisa-saber/grid-implicita-firefox.svg)\n\nAs linhas representam a parte expl√≠cita do nosso grid. O tracejado representa a parte impl√≠cita, criada automaticamente para comportar o excesso de elementos.\n\nAssim como temos `grid-template-columns` e `grid-template-rows` para controlar o grid expl√≠cito, podemos usar `grid-auto-columns` e `grid-auto-rows` para definir como o nosso grid impl√≠cito ser√° disposto.\n\n```css\n.container {\n  display: grid;\n  gap: 10px;\n\n  /* grid expl√≠cito */\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 100px 100px 100px;\n\n  /* grid impl√≠cito */\n  grid-auto-rows: 50px;\n}\n```\n\nCom o uso de `grid-auto-rows: 50px` definimos agora que todas as novas linhas ter√£o `50px` de tamanho. A propriedade `grid-auto-rows` aceita muito mais do que apenas um valor. Se adicionarmos outros valores separados por espa√ßo √† essa declara√ß√£o, podemos controlar de forma intercalada o tamanho de nossas linhas impl√≠citas.\n\n```css\n.container {\n  display: grid;\n  gap: 10px;\n\n  /* grid expl√≠cito */\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 80px 80px 80px;\n\n  /* grid impl√≠cito */\n  grid-auto-rows: 50px 80px;\n}\n```\n\n![Grid impl√≠cita `grid-auto-rows: 50px 80px`](/posts/css-grid-o-que-voce-precisa-saber/grid-auto-rows-50-80.svg)\n\n## Definindo a dire√ß√£o do fluxo de um cont√™iner grid com grid-auto-flow\n\nPor padr√£o, cada elemento em um cont√™iner grid automaticamente cria um nova linha. Ent√£o um cont√™iner grid com tr√™s elementos dentro dele teria uma coluna e tr√™s linhas.\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv>Um\u003C/div>\n  \u003Cdiv>Dois\u003C/div>\n  \u003Cdiv>Tr√™s\u003C/div>\n\u003C/div>\n```\n\n```css\n.container {\n  display: grid;\n}\n```\n\nComo n√£o declaramos nenhuma coluna ou linha com `grid-template-columns` ou `grid-template-rows`, toda a grid ser√° impl√≠cita.\n\nCada elemento no nosso grid cria uma nova linha. Para mudar este comportamento e criar colunas, basta usar `grid-auto-flow: column`.\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv>Um\u003C/div>\n  \u003Cdiv>Dois\u003C/div>\n  \u003Cdiv>Tr√™s\u003C/div>\n\u003C/div>\n```\n\n```css\n.container {\n  display: grid;\n  grid-auto-flow: column;\n}\n```\n\n![Cont√™iner grid com `grid-auto-flow: column`](/posts/css-grid-o-que-voce-precisa-saber/grid-auto-flow-row.svg)\n\nJuntando `grid-auto-flow`, `grid-auto-columns` e `grid-auto-rows`, podemos criar layouts autom√°ticos que guiam o conte√∫do din√¢mico para seguir um padr√£o que definimos. Um dos [tr√™s h√°bitos para escrever CSS escal√°vel](https://triangulo.dev/posts/tres-habitos-css-escalavel) √© deixar o conte√∫do fluir para acomodar mudan√ßas que nem sempre conseguimos prever enquanto estamos desenvolvendo.\n\n## Continue aprendendo\n\nO CSS Grid √© uma ferramenta muito poderosa para criar layouts em duas dimens√µes. Neste primeiro artigo exploramos apenas uma pequena parte de todas as suas capacidades. Acompanhe os posts dessa s√©rie:\n\n- [CSS Grid: o b√°sico que voc√™ precisa saber (com exemplos)](/posts/css-grid-o-que-voce-precisa-saber);\n- [CSS Grid: posicionando elementos, na pr√°tica](/posts/css-grid-posicionando-elementos-na-pratica);\n- [CSS Grid: alinhando elementos (com exemplos)](/posts/css-grid-alinhando-elementos-na-pratica);\n- [Criando layouts responsivos com CSS Grid](/posts/criando-layouts-responsivos-css-grid);\n- [Usando grid-template-areas do CSS Grid](/posts/usando-grid-template-areas-do-css-grid);\n\nAlguns destes artigos ainda n√£o foram publicados, ent√£o inscreva-se na newsletter do Tri√¢ngulo para receber atualiza√ß√µes.\n\nN√£o deixe tamb√©m de conferir o [Basic Concepts of grid layout (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout) para um tour completo pelas funcionalidades do CSS Grid ou o excelente [Complete Guide to Grid (css-tricks.com)](https://css-tricks.com/snippets/css/complete-guide-grid/).\n\nNosso Guia de Estudos CSS tamb√©m conta com uma [se√ß√£o dedicada para o CSS Grid](https://trello.com/c/Vf40uwRL/13-css-grid). Bons estudos!","src/pages/posts/css-grid-o-que-voce-precisa-saber/index.mdx","c8ff3bf6f7818d2e","criando-layouts-responsivos-css-grid",{"id":135,"data":137,"body":142,"filePath":143,"digest":144,"deferredRender":24},{"layout":14,"title":138,"description":139,"authorName":17,"authorImage":18,"pubDate":140,"ogImage":141},"Criando layouts responsivos com CSS Grid","Aprenda a utilizar t√©cnicas do CSS Grid para criar layouts responsivos.",["Date","2022-02-28T21:00:00.000Z"],"/posts/criando-layouts-responsivos-css-grid/social.png?v=2","O CSS Grid √© uma poderos√≠ssima ferramenta de layout. Muito al√©m de apenas layouts est√°ticos, alguns truques podem transformar o CSS Grid em um grande aliado na hora de criar layouts responsivos.\n\n**Criar layouts responsivos √© dif√≠cil**. Na web, dispositivos com qualquer tamanho de tela podem visitar seu site ou usar seu _webapp_.\n\nFlexibilidade. Essa √© a caracter√≠stica principal de uma ferramenta utilizada para criar layouts responsivos. Neste post vou te mostrar com exemplos pr√°ticos como utilizar algumas propriedades do CSS Grid como `grid-template-columns` e `grid-auto-columns`, `repeat(..., minmax())`, `auto-fill` e `auto-fit` para **criar layouts responsivos robustos**.\n\n## √çndice\n\n## Criando colunas responsivas com a unidade `fr`\n\nA forma mais simples de criar layouts que se adaptam com CSS Grid √© utilizar a unidade `fr` para o tamanho das colunas.\n\nComo [j√° aprendemos no primeiro post desta s√©rie sobre CSS Grid](https://triangulo.dev/posts/css-grid-o-que-voce-precisa-saber#:~:text=Isto%20%C3%A9%20poss%C3%ADvel,em%20cont%C3%AAineres%20grid.), a unidade `fr` representa uma **fr**a√ß√£o do espa√ßo livre dispon√≠vel em uma linha ou coluna.\n\nPara entender a unidade `fr` na pr√°tica, vamos criar um exemplo de galeria de imagens. Come√ßaremos com o HTML:\n\n```html\n\u003Csection class=\"gallery\">\n  \u003Cimg\n    class=\"gallery-img\"\n    src=\"https://images.unsplash.com/photo-1619447998478-8d09f6a4948b?fit=crop&w=600&q=80\"\n    alt=\"\"\n  />\n  \u003Cimg\n    class=\"gallery-img\"\n    src=\"https://images.unsplash.com/photo-1521813475821-5e3f5bc3c7a6?fit=crop&w=870&q=80\"\n    alt=\"\"\n  />\n  \u003Cimg\n    class=\"gallery-img\"\n    src=\"https://images.unsplash.com/photo-1599400028251-1ea39ae02e23?fit=crop&w=600&q=80\"\n    alt=\"\"\n  />\n  \u003Cimg\n    class=\"gallery-img\"\n    src=\"https://images.unsplash.com/photo-1615962849838-42f9936e4b77?fit=crop&w=600&q=80\"\n    alt=\"\"\n  />\n  \u003Cimg\n    class=\"gallery-img\"\n    src=\"https://images.unsplash.com/photo-1618022125607-13a0eb4d81c5?fit=crop&w=600&q=80\"\n    alt=\"\"\n  />\n\u003C/section>\n```\n\nNesse HTML, temos uma `section` com a classe `.gallery` e v√°rias `.gallery-img` para nossas imagens. Para estiliz√°-las usaremos esse CSS:\n\n```css\n.gallery {\n  width: 100%;\n  padding: 20px;\n  box-sizing: border-box;\n\n  display: grid;\n  gap: 20px;\n\n  grid-template-columns: 200px 200px;\n}\n\n.gallery-img {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n```\n\nCom esse c√≥digo, temos uma galeria de imagens com duas colunas, com `200px` de largura cada. **Nosso exemplo ainda n√£o √© responsivo**. Para fazer as colunas se adaptarem ao tamanho da tela, podemos usar `grid-template-columns: 1fr 1fr`.\n\n```css\n.gallery {\n  /* ... */\n  grid-template-columns: 1fr 1fr;\n}\n```\n\nEsse c√≥digo significa que no nosso cont√™iner grid teremos duas colunas, **cada uma com uma fra√ß√£o do espa√ßo dispon√≠vel**. Agora, n√£o importa o tamanho da tela, teremos duas colunas preenchendo todo o espa√ßo livre. Como nossa `.gallery-img` ocupa toda a largura dispon√≠vel em cada coluna (`width: 100%`), elas crescer√£o com a tela.\n\n![Exemplo de galeria CSS Grid em tr√™s resolu√ß√µes diferentes: mobile, tablet e desktop](/posts/criando-layouts-responsivos-css-grid/galeria-css-grid-em-3-resolucoes-diferentes.png)\n\n## Usando CSS Grid para uma coluna fixa e outra vari√°vel\n\nCom o CSS Grid conseguimos definir uma coluna de um tamanho fixo e deixar que as outras colunas usem o resto do tamanho que sobrar dentro do cont√™iner grid.\n\nNo nosso exemplo de galeria de imagens, podemos usar um valor diferente para `grid-template-columns`, onde a primeira coluna tem `200px` e a segunda tem `1fr` (uma **fr**a√ß√£o do espa√ßo restante dispon√≠vel).\n\n```css\n.gallery {\n  /* ... */\n  grid-template-columns: 200px 1fr;\n}\n```\n\nIsso tamb√©m vale para m√∫ltiplas colunas:\n\n```css\n.gallery {\n  /* ... */\n  grid-template-columns: 200px 2fr 1fr;\n}\n```\n\nA propriedade `grid-template-columns` pode receber valores de diversas unidades diferentes. `rem`, `em`, `%`, `fr`, `vw`, `min-content`, `max-content` e outras. Voc√™ pode misturar valores fixos e valores flex√≠veis e criar exatamente o layout que voc√™ quiser.\n\nPor mais que voc√™ defina colunas fixas, alguns layouts exigem quantidades diferentes de colunas para comportar o conte√∫do em diferentes tamanhos de tela. A primeira solu√ß√£o que penso para isso √© usar `@media` queries para mudar o valor de `grid-template-columns`.\n\nMas existe uma outra forma:\n\n## Criando layouts responsivos com CSS Grid e `repeat(auto-fit)`\n\nA principal ferramenta para criar layouts responsivos com CSS Grid √© o `repeat()`, junto com alguns valores como `auto-fit` e `minmax()`.\n\nA fun√ß√£o `repeat()` do CSS √© utilizada com propriedades, como `grid-template-columns`, para definir a estrutura repetida em um cont√™iner grid (elemento que tem `display: grid`). Al√©m de valores fixos como `repeat(2, 200px)` (que criar√° duas colunas de `200px`), o `repeat()` tamb√©m aceita a palavra-chave `auto-fit`.\n\n`auto-fit` define que o n√∫mero de repeti√ß√µes das colunas ser√° a maior quantidade poss√≠vel que couber sem vazar do cont√™iner grid.\n\nPara ver na pr√°tica como o `repeat(auto-fit)` se comporta, podemos usar `grid-template-columns: repeat(auto-fit, 300px)` em um exemplo de site bastante comum: um blog. Esse c√≥digo far√° com que todos os elementos do cont√™iner grid ocupem quantas colunas de `300px` couberem dentro dele.\n\nVamos come√ßar a construir nosso exemplo, come√ßando pelo HTML:\n\n```html\n\u003Csection class=\"blog\">\n  \u003Carticle class=\"post\">\n    \u003Cimg\n      class=\"post-image\"\n      src=\"https://images.unsplash.com/photo-1619447998478-8d09f6a4948b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1736&q=80\"\n      alt=\"woman in white dress shirt sitting on chair near window during daytime\"\n    />\n    \u003Ch2 class=\"post-title\">Os melhores livros para ler em uma cafeteria\u003C/h2>\n  \u003C/article>\n\n  \u003C!-- ... mais \u003Carticle>s ... -->\n\u003C/section>\n```\n\nNesse HTML temos o `.blog`, que pode conter diversos `.post`s. Os estilos base ser√£o:\n\n```css\n.blog {\n  width: 100%;\n  padding: 20px;\n  box-sizing: border-box;\n\n  display: grid;\n  gap: 20px;\n}\n\n.post-image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n\n.post-title {\n  font-size: var(--font-size-large);\n  margin-top: var(--space-smaller);\n  margin-bottom: 0px;\n  letter-spacing: -0.02em;\n  line-height: var(--line-height-small);\n}\n```\n\nA partir desses estilos, temos um cont√™iner grid simples, onde cada `post` ocupa toda a tela. Se adicionarmos `grid-template-columns: repeat(auto-fit, 300px)` em `.blog`, cada `post` ocupar√° `300px` e teremos quantas colunas de `300px` couberem na tela.\n\nCom apenas uma defini√ß√£o de `grid-template-columns` usando `repeat()` e `auto-fit`, conseguimos fazer nossa p√°gina simples de blog se adaptar ao tamanho da tela.\n\nNesse exemplo, os elementos `post` t√™m um tamanho predefinido de `300px`.\n\nExiste tamb√©m uma outra fun√ß√£o CSS que pode deixar nosso layout ainda mais flex√≠vel: `minmax()`.\n\n## Usando `minmax()` e `repeat(auto-fit)` para criar layouts responsivos\n\nO segundo valor passado para `repeat()` √© o tamanho que cada coluna ter√° no nosso layout. A fun√ß√£o CSS `minmax()` permite que esse valor seja flex√≠vel, de acordo com um tamanho m√≠nimo e um tamanho m√°ximo para cada coluna.\n\nPara melhorar o layout de `blog`, vamos aplicar agora um novo valor em `grid-template-columns`, usando `minmax()` em `repeat()`:\n\n```css\n.blog {\n  /* ... */\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n}\n```\n\nO valor `minmax(300px, 1fr)` nesse nosso exemplo significa que as colunas ter√£o entre `300px` e `1fr` de tamanho. Como `1fr` √© uma unidade flex√≠vel que significa \"uma fra√ß√£o de espa√ßo dispon√≠vel\", as colunas ser√£o flex√≠veis e ocupar√£o todo o espa√ßo dispon√≠vel dentro de `blog`.\n\nNa pr√°tica, `minmax(300px, 1fr)` faz com que suas colunas ocupem no m√≠nimo `300px`. Se houver espa√ßo sobrando dentro do cont√™iner grid, mas n√£o o suficiente para adicionar mais um coluna de `300px`, todas as outras colunas crescer√£o proporcionalmente para ocupar o espa√ßo vazio.\n\n![Exemplo de blog com colunas auto-fit 300px](/posts/criando-layouts-responsivos-css-grid/colunas-com-repeat-auto-fit-minmax.svg)\n\n## Usando a fun√ß√£o CSS `min()` junto com `minmax()` para layouts responsivos\n\nQuando usamos `minmax()`, precisamos ter cuidado com um detalhe: se o tamanho m√≠nimo estiver em `px` ou outra unidade fixa, √© poss√≠vel que a coluna vaze o cont√™iner grid (_overflow_).\n\nPara evitar que uma coluna seja maior que o cont√™iner grid, podemos usar a fun√ß√£o CSS `min()` em conjunto com `minmax()`.\n\nA fun√ß√£o `min()` recebe diversos valores e retornar√° o menor entre eles. **A grande sacada √© usar uma mistura de valores em unidades fixas e flex√≠veis**. Para resolver o nosso problema da coluna ultrapassar o tamanho do cont√™iner grid, podemos usar `min(100%, 300px)`, por exemplo. `100%` representar√° todo o espa√ßo dispon√≠vel. Se ele for menor do que `300px`, a fun√ß√£o retornar√° esse valor menor, impedindo que a coluna vaze.\n\n![Demonstra√ß√£o de min(100%, 300px) em duas resolu√ß√µes diferentes: 600px e 300px](/posts/criando-layouts-responsivos-css-grid/exemplo-min-100-300px.svg)\n\nOutros exemplos do uso da fun√ß√£o CSS `min()`:\n\n1. `min(50vw, 200px)`: o valor m√≠nimo entre 50% da largura da viewport (`vw`) e `200px`.\n2. `min(auto, 300px)`: o valor m√≠nimo entre `auto` (bastante utilizado com Flexbox e CSS Grid) e `300px`.\n\nAssim como temos `min()`, a fun√ß√£o CSS `max()` tamb√©m existe. Ela retornar√° o maior valor entre os passado para ela. A fun√ß√£o CSS `max()` pode ser bastante √∫til para quando voc√™ n√£o quer que o tamanho de um elemento seja menor do que algum valor em telas grandes, por exemplo.\n\n## Repetindo colunas no CSS Grid com `auto-fit` vs. `auto-fill`\n\nNos exemplos anteriores utilizamos `repeat(auto-fit, ...)` para gerar colunas que se adaptam ao tamanho dispon√≠vel em um cont√™iner grid. Al√©m de `auto-fit`, podemos usar tamb√©m a palavra-chave `auto-fill`.\n\nAo usar `repeat(auto-fill, ...)`, a quantidade de colunas em um cont√™iner grid ir√£o se adaptar ao seu tamanho, mas tamb√©m teremos colunas vazias, caso as colunas com conte√∫do n√£o sejam suficientes para preencher todo o espa√ßo dispon√≠vel.\n\n![Exemplo da diferen√ßa entre auto-fit e auto-fill](/posts/criando-layouts-responsivos-css-grid/auto-fit-vs-auto-fill.svg)\n\nNessa imagem, podemos perceber que com `auto-fill`, uma nova coluna vazia √© criada. Com `auto-fit`, em vez de criar uma nova coluna vazia, o espa√ßo dela √© adicionada ao tamanho das colunas com conte√∫do.\n\n## Continue aprendendo\n\nCSS Grid √© muito poderoso. De layouts fixos a layouts que se adaptam ao tamanho exato da p√°gina. Neste post exploramos como utiliz√°-lo para criar layouts responsivos, mas vimos apenas a superf√≠cie.\n\nAqui no blog, este post faz parte de uma s√©rie sobre CSS Grid:\n\n- [CSS Grid: o b√°sico que voc√™ precisa saber (com exemplos)](/posts/css-grid-o-que-voce-precisa-saber);\n- [CSS Grid: posicionando elementos, na pr√°tica](/posts/css-grid-posicionando-elementos-na-pratica);\n- [CSS Grid: alinhando elementos (com exemplos)](/posts/css-grid-alinhando-elementos-na-pratica);\n- [Criando layouts responsivos com CSS Grid](/posts/criando-layouts-responsivos-css-grid);\n- [Usando grid-template-areas do CSS Grid](/posts/usando-grid-template-areas-do-css-grid);\n\nPara escrever este post eu utilizei diversas refer√™ncias. A principal delas foi a [especifica√ß√£o CSS Grid Layout Module Level 2 (csswg.org)](https://drafts.csswg.org/css-grid/#propdef-grid-template-columns). Um outro post que utilizei como refer√™ncia foi o [Intrinsically Responsive CSS Grid with minmax() and min() (evanminto.com)](https://evanminto.com/blog/intrinsically-responsive-css-grid-minmax-min/). Testar e quebrar exemplos tamb√©m fez parte da minha pesquisa, eu recomendo muito que voc√™ teste o que aprendeu na pr√°tica.\n\nBons estudos!","src/pages/posts/criando-layouts-responsivos-css-grid/index.mdx","bb20d86fcb4385b2","guia-completo-flexbox",{"id":145,"data":147,"body":152,"filePath":153,"digest":154,"deferredRender":24},{"layout":14,"title":148,"description":149,"authorName":17,"authorImage":18,"pubDate":150,"ogImage":151},"Guia completo de Flexbox - display: flex","Aprenda a utilizar o Flexbox (display: flex) para criar layouts com CSS, usando este guia ilustrado com todas as suas propriedades.",["Date","2020-10-29T13:13:00.000Z"],"/posts/introducao-flexbox/social.png","O Flexbox √© um dos m√≥dulos do CSS criados para facilitar a vida de quem precisa criar layouts na web. Com ele √© poss√≠vel controlar o tamanho, alinhamento e distribui√ß√£o de um cont√™iner e seus elementos-filhos (chamados de itens). Esse conjunto de ferramentas torna o Flexbox extremamente capaz de resolver problemas de layout em uma dimens√£o.\n\nAntes do Flexbox era bastante comum ouvir uma hist√≥ria de algu√©m que n√£o conseguiu centralizar um elemento com CSS, j√° que as ferramentas de layout padr√£o (`block` e `inline`) n√£o lidam muito bem com o alinhamento e distribui√ß√£o de elementos. Outro problema bastante comum era n√£o conseguir facilmente tornar o tamanho de um elemento flex√≠vel, j√° que a √∫nica forma de fazer isso era usando unidades em porcentagem e fazendo c√°lculos manuais com elas.\n\nEste post de introdu√ß√£o vai te mostrar os principais conceitos por tr√°s desse poderoso m√≥dulo do CSS e como utiliz√°-lo para estilizar seus projetos na web. Vamos come√ßar criando um cont√™iner _flex_.\n\n## √çndice\n\n## Criando um cont√™iner _flex_\n\nPara criar um cont√™iner _flex_, voc√™ precisa apenas utilizar `display: flex` em um elemento.\n\n```css\n.elemento {\n  display: flex;\n}\n```\n\nAo aplicar a regra `display: flex`, o elemento se tornar√° um cont√™iner _flex_ e seus elementos-filhos ser√£o do tipo _flex_. Do lado de fora, um cont√™iner _flex_ n√£o √© diferente de um outro elemento _block_, mas o comportamento de seus elementos-filhos √© completamente modificado.\n\n**Dica:** Isso pode ser explicado na especifica√ß√£o [Display Module Level 3](https://www.w3.org/TR/css-display-3/), que diz que a propriedade `display` especifica dois tipos de _display_: o externo e o interno. Usar `display: flex` √©, ent√£o, a forma curta de `display: block flex`, que define o display do cont√™iner em si como `block` e de seus elementos-filhos como `flex`.\n\n## Alinhando elementos com Flexbox\n\nA partir do momento que voc√™ tem um cont√™iner _flex_, seus elementos ser√£o dispostos ao longo do **eixo principal**, formando uma linha. Usando a propriedade `flex-direction`, podemos trocar a dire√ß√£o do eixo principal com `flex-direction: column`, onde o elementos formar√£o uma coluna. O padr√£o para esta propriedade √© `flex-direction: row`.\n\n```css\n.container-row {\n  display: flex;\n  flex-direction: row; /* o eixo principal ser√° uma linha */\n}\n\n.container-column {\n  display: flex;\n  flex-direction: column; /* o eixo principal ser√° uma coluna */\n}\n```\n\n![Conteiner flex e seus\neixos](/posts/introducao-flexbox/conteiner-flex.png)\n\nA propriedade `flex-direction` recebe tamb√©m valores que inverter√£o a ordem de disposi√ß√£o dos elementos de um cont√™iner _flex_: `row-reverse` e `column-reverse`.\n\n![flex-direction com valores row, row-reversed, column e column-reversed](/posts/introducao-flexbox/flex-direction.png)\n\nPara alinhar os elementos ao longo dos dois eixos, utilizamos tr√™s propriedades de alinhamento: `justify-content`, `align-items` e `align-content`.\n\n### Usando a propriedade `justify-content`\n\nA propriedade `justify-content` define o alinhamento do conte√∫do do cont√™iner _flex_ ao longo de seu eixo principal. Cada um de seus poss√≠veis valores afetar√° o alinhamento de todo o conte√∫do, resolvendo o antigo problema de centralizar elementos ou distribu√≠-los de forma igual.\n\nSeu valor padr√£o √© `flex-start`, que define que o conte√∫do ser√° alinhado a partir do come√ßo do eixo principal.\n\n![Ilustra√ß√£o com exemplo de justify-content: flex-start](/posts/introducao-flexbox/justify-content-flex-start.png)\n\nO valor `flex-end` define que o conte√∫do ser√° alinhado a partir do final do eixo principal.\n\n![Ilustra√ß√£o com exemplo de justify-content flex-end](/posts/introducao-flexbox/justify-content-flex-end.png)\n\nUsando `center`, o conte√∫do ser√° alinhado ao centro do eixo principal.\n\n![Ilustra√ß√£o com exemplo de justify-content center](/posts/introducao-flexbox/justify-content-center.png)\n\nUm outro valor bastante √∫til √© o `space-between`, que alinha o conte√∫do ao longo do eixo principal e adiciona um espa√ßo padr√£o entre todos os elementos.\n\n![Ilustra√ß√£o com exemplo de justify-content space-between](/posts/introducao-flexbox/justify-content-space-between.png)\n\nJ√° o `space-around` adiciona um espa√ßo ao redor de todos os elementos.\n\n![Ilustra√ß√£o com exemplo de justify-content space-around](/posts/introducao-flexbox/justify-content-space-around.png)\n\nParecido com o `space-around`, o `space-evenly` adiciona um espa√ßo ao redor de todos os elementos de forma igual, incluindo os das pontas.\n\n![Ilustra√ß√£o com exemplo de justify-content space-evenly](/posts/introducao-flexbox/justify-content-space-evenly.png)\n\nExistem tamb√©m [outros valores para `justify-content`](https://developer.mozilla.org/pt-BR/docs/Web/CSS/justify-content) que n√£o cobriremos neste artigo: `start`, `end`, `left` e `right`.\n\n### Alinhando elementos com a propriedade `align-items`\n\nPara alinharmos elementos ao longo do eixo transversal de um cont√™iner _flex_, usamos a propriedade `align-items`. Os seus valores principais s√£o: `stretch`, `flex-start`, `flex-end`, `center`, e `baseline`.\n\n`stretch` √© o valor padr√£o para `align-items`. Traduzindo para portugu√™s, \"_stretch_\" significa \"esticar\". Ent√£o, por padr√£o, os elementos ser√£o esticados para ocupar todo o espa√ßo dispon√≠vel no eixo transversal. Isso √© muito √∫til quando queremos que todos os elementos tenham o mesmo tamanho quando o conte√∫do interno deles √© diferente.\n\n![Ilustra√ß√£o com exemplo de align-items stretch](/posts/introducao-flexbox/align-items-stretch.png)\n\nCom `flex-start`, todos os elementos do cont√™iner _flex_ se alinhar√£o a partir do in√≠cio do eixo transversal.\n\n![Ilustra√ß√£o com exemplo de align-items flex-start](/posts/introducao-flexbox/align-items-flex-start.png)\n\nJ√° o `flex-end` definir√° que os elementos se alinhem a partir do final do eixo transversal.\n\n![Ilustra√ß√£o com exemplo de align-items flex-end](/posts/introducao-flexbox/align-items-flex-end.png)\n\nUsando o valor `center`, todos os elementos ser√£o alinhados a partir do centro do eixo transversal.\n\n![Ilustra√ß√£o com exemplo de align-items center](/posts/introducao-flexbox/align-items-center.png)\n\nO valor `baseline` distribuir√° os elementos de certa forma que seus _baselines_ se alinhem ao longo do eixo transversal.\n\n![Ilustra√ß√£o com exemplo de align-items baseline](/posts/introducao-flexbox/align-items-baseline.png)\n\nNeste artigo n√£o cobriremos alguns dos [outros valores poss√≠veis para `align-items`](https://developer.mozilla.org/pt-BR/docs/Web/CSS/align-items) como: `start`, `self-start`, `end`, `self-end`, e os modificadores `safe` e `unsafe`.\n\n### Alinhando o conte√∫do no Flexbox com `align-content`\n\nAo inv√©s de alinhar os elementos, √© poss√≠vel tamb√©m alinhar todo o conte√∫do de um cont√™iner _flex_ no eixo transversal. A propriedade `align-content` √© menos utilizada que a `align-items`, mas muito √∫til em situa√ß√µes em que o cont√™iner _flex_ tem um tamanho pr√©-definido (`100vh` por exemplo) e n√£o sabemos com anteced√™ncia o tamanho de todos os elementos-filhos.\n\nO valor padr√£o para esta propriedade √© `normal`, que funciona como se nenhum valor tivesse sido definido.\n\nCom `flex-start`, o conte√∫do ser√° alinhado ao in√≠cio do eixo transversal. J√° `flex-end` alinhar√° o conte√∫do do cont√™iner _flex_ ao final. Usando `center`, o conte√∫do ser√° alinhado ao centro.\n\n![Ilustra√ß√£o com exemplo de align-content flex-start, flex-end e center](/posts/introducao-flexbox/align-content-flex-start-end-center.png)\n\nTamb√©m podemos utilizar o valor `space-between` para adicionar espa√ßamento entre as linhas de conte√∫do, `space-around` para espa√ßamento ao redor destas linhas e `space-evenly` para espa√ßamento igual ao redor das linhas de conte√∫do incluindo as pontas.\n\n![Ilustra√ß√£o com exemplo de align-content space-between, space-around e space-evenly](/posts/introducao-flexbox/align-content-space.png)\n\nO valor `stretch` far√° com que as linhas de conte√∫do se estiquem para tomar todo o espa√ßo dispon√≠vel no eixo transversal.\n\n![Ilustra√ß√£o com exemplo de align-content stretch](/posts/introducao-flexbox/align-content-stretch.png)\n\nNeste artigo n√£o cobriremos alguns dos [outros valores poss√≠veis para `align-content`](https://developer.mozilla.org/pt-BR/docs/Web/CSS/align-content) como: `start`, `end` e os modificadores `safe` e `unsafe`.\n\n### Usando `align-self` para alinhar elementos dentro de um cont√™iner flex\n\nPodemos tamb√©m utilizar `align-self` em elementos _flex_ para alterar seu alinhamento no eixo transversal de forma independente.\n\n![Ilustra√ß√£o com exemplo de align-self](/posts/introducao-flexbox/align-self.png)\n\nA propriedade `align-self` recebe os mesmos valores que `align-items` ou `align-content`.\n\n## Quebrando o conte√∫do em novas linhas ou colunas\n\nPor padr√£o, os elementos-filhos de um cont√™iner _flex_ ser√£o dispostos ao longo dos eixos, sem quebrarem em novas linhas e colunas. Para controlar este comportamento, podemos utilizar a propriedade `flex-wrap`.\n\nO valor padr√£o para esta propriedade √© `nowrap`, que define que os elementos ser√£o dispostos em uma √∫nica linha.\n\n`wrap` definir√° que os elementos ir√£o ocupar novas linhas, em dire√ß√£o ao fim do eixo transversal.\n\nJ√° o valor `wrap-reverse` especifica que os elementos ir√£o ocupar novas linhas em dire√ß√£o ao in√≠cio do eixo transversal\n\n![Ilustra√ß√£o com exemplo de flex-wrap](/posts/introducao-flexbox/flex-wrap.png)\n\n## Definindo tamanhos flex√≠veis para os elementos _flex_\n\nAl√©m de ferramentas para distribuir e alinhar elementos-filhos em um cont√™iner _flex_, o Flexbox tamb√©m tem propriedades para auxiliar na defini√ß√£o do tamanho de elementos. Assim como o nome deixa a entender, o forte dessas propriedades √© poder escolher valores flex√≠veis. Com `flex-grow`, `flex-shrink` e `flex-basis` aplicados a um elemento-filho _flex_, podemos controlar o seu tamanho dentro um cont√™iner _flex_ e como ele lida com a sobra ou falta de espa√ßo.\n\n### A propriedade `flex-grow`\n\nA propriedade `flex-grow` recebe como valor um n√∫mero que represente o \"fator de crescimento\". Esse n√∫mero define como o elemento-filho reagir√° √† sobra de espa√ßo em um cont√™iner _flex_. A sobra de espa√ßo √© calculada pelo o tamanho total do cont√™iner _flex_ menos o espa√ßo base total ocupado pelos elementos-filhos. Por padr√£o, o valor de `flex-grow` √© `0`.\n\nPara entender um pouco melhor como essa propriedade funciona na pr√°tica, vamos utilizar um exemplo. Em um cont√™iner _flex_ com `300px` de tamanho, temos tr√™s elementos-filhos com `100px` de tamanho. Os dois primeiros t√™m o valor de `flex-grow: 1` e o terceiro tem o valor de `flex-grow: 2`. Nesse exemplo, ter√≠amos uma sobra de espa√ßo de `200px` que seria distribu√≠da entre os tr√™s elementos-filhos de acordo com os seus fatores, de forma que no final o espa√ßo ocupado por eles seja igual ao tamanho do cont√™iner. J√° que o terceiro elemento tem um fator de crescimento `2`, e os dois primeiros t√™m um fator de crescimento `1`, o terceiro elemento crescer√° duas vezes mais do que os outros dois.\n\n![Ilustra√ß√£o com exemplo de flex-grow](/posts/introducao-flexbox/flex-grow.png)\n\n### A propriedade `flex-shrink`\n\nAssim como podemos tornar flex√≠vel o crescimento dos elementos-filhos, podemos tamb√©m utilizar `flex-shrink` para definir os seus fatores de encolhimento.\n\nQuando faltar espa√ßo em um cont√™iner _flex_, os seus elementos-filhos s√£o encolhidos de acordo com o fator de encolhimento. Por padr√£o, o valor de `flex-shrink` √© `1`.\n\n![Ilustra√ß√£o com exemplo de flex-shrink](/posts/introducao-flexbox/flex-shrink.png)\n\n### Controlando o tamanho de elementos com `flex-basis`\n\nO tamanho dos elementos em um cont√™iner _flex_ √© calculado tamb√©m de forma flex√≠vel. Por padr√£o, esse tamanho √© calculado de acordo com o tamanho do conte√∫do do elemento ou pelo seu `width` ou `height`. Esse valor padr√£o ajuda a pessoa desenvolvedora a criar interfaces que se adaptam ao tamanho do conte√∫do, mas pode ser um tanto confuso para quem n√£o espera esse comportamento\n\n![Ilustra√ß√£o com exemplo de flex-basis auto](/posts/introducao-flexbox/flex-basis-auto.png)\n\nA propriedade `flex-basis` pode ser alterada de seu valor padr√£o `auto` para qualquer unidade de medida de tamanho e porcentagem. Se o elemento tiver `width` ou `height` definidos e um `flex-basis` for definido, o valor de `flex-basis` tomar√° preced√™ncia no c√°lculo do tamanho base de um elemento _flex_.\n\n![Ilustra√ß√£o com exemplo de flex-basis com valores num√©ricos](/posts/introducao-flexbox/flex-basis-numero.png)\n\n## Ordenando elementos-filhos de um cont√™iner _flex_\n\nOutra propriedade que o Flexbox adicionou ao CSS foi a `order`, que controla a ordem dos elementos-filhos em um cont√™iner _flex_. Elementos em um cont√™iner ser√£o ordenados de forma ascendente baseados no valor de `order` e sua posi√ß√£o no DOM.\n\nO valor padr√£o de `order` √© `0`. Voc√™ pode definir `order` com qualquer n√∫mero inteiro.\n\n![Ilustra√ß√£o com exemplo de order](/posts/introducao-flexbox/order.png)\n\nVale alertar que a ordena√ß√£o atrav√©s de valores `order` n√£o altera a ordena√ß√£o desses elementos no DOM, o que cria uma diferen√ßa na ordem real dos elementos e sua ordem de exibi√ß√£o. Isso √© um problema no uso da navega√ß√£o por teclado, mas um problema ainda maior para usu√°rios de softwares de leitura de tela. Evite utilizar `order` se a ordena√ß√£o tiver efeitos hier√°rquicos que prejudicariam a acessibilidade do seu site.\n\n## Suporte em diferentes navegadores\n\nO Flexbox √© suportado por grande parte dos navegadores. Mesmo assim, alguns bugs podem quebrar ou mudar o comportamento dos seus elementos de um navegador para outro. O projeto [flexbugs](https://github.com/philipwalton/flexbugs) possui uma lista de mais de 10 bugs, com dicas de como contorn√°-los.\n\nFora estes bugs, voc√™ pode esperar que o seu site estilizado com Flexbox seja renderizado corretamente em todos os navegadores mais utilizados do mercado. O site Can I Use [lista o m√≥dulo CSS de Flexbox](https://caniuse.com/flexbox) como sendo suportado nos navegadores de mais de 97% dos usu√°rios no mundo.\n\n## Continue aprendendo\n\nTodas essas ferramentas do m√≥dulo CSS Flexbox trouxeram uma quantidade enorme de controle e flexibilidade para estilizar componentes e layouts com CSS. Em breve escreveremos um outro post com exemplos pr√°ticos utilizando todas as propriedades que cobrimos nesta introdu√ß√£o. Por enquanto, voc√™ pode dar uma olhada no [Solved by Flexbox](https://philipwalton.github.io/solved-by-flexbox/) para ver como o Flexbox resolve problemas cl√°ssicos de layout ou ent√£o jogar o [Flexbox Froggy](https://flexboxfroggy.com/) para aprender na pr√°tica.\n\nPara escrever este post eu utilizei diversas refer√™ncias, incluindo a especifica√ß√£o da W3. Para continuar aprendendo sobre Flexbox, recomendo:\n\n- [Conceitos b√°sicos do Flexbox (developer.mozilla.org)](https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Flexible_Box_Layout/Conceitos_Basicos_do_Flexbox)\n- [A guide to Flexbox (css-tricks.com)](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n- [What Happens When You Create A Flexbox Flex Container? (smashingmagazine.com)](https://www.smashingmagazine.com/2018/08/flexbox-display-flex-container/)\n- [CSS Flexible Box Layout Module Level 1 (w3.org)](https://www.w3.org/TR/css-flexbox-1/)\n\n_Obrigado Jonathan Zanella por toda a ajuda na revis√£o e edi√ß√£o deste post._","src/pages/posts/guia-completo-flexbox/index.mdx","a6a96e96d9a89ca4","paleta-de-cores-perfeita-para-seu-projeto",{"id":155,"data":157,"body":162,"filePath":163,"digest":164,"deferredRender":24},{"layout":14,"title":158,"description":159,"authorName":17,"authorImage":18,"pubDate":160,"ogImage":161},"A paleta de cores perfeita para o seu projeto","Use o sistema de cores Radix Colors para criar uma paleta bonita, funcional e acess√≠vel para seu site/aplicativo.",["Date","2021-07-02T00:00:00.000Z"],"/posts/paleta-de-cores-perfeita-para-seu-projeto/social.png","Escolher uma paleta de cores para um projeto n√£o √© uma tarefa muito f√°cil, pelo menos para mim. Al√©m de precisar se preocupar em ter cores que combinam entre si e ficam bonitas na tela, tamb√©m precisamos ter certeza que nossa paleta √© acess√≠vel.\n\nO que eu n√£o sabia era que eu mais precisava era de um **sistema de cores**.\n\nO **[Radix Colors](https://www.radix-ui.com/colors)** √© um sistema de cores open-source, feito para criarmos sites e aplicativos bonitos e acess√≠veis.\n\nEsse sistema de cores funciona assim: todas as 28 cores est√£o em uma escala de 1 a 12 e preparadas para serem usadas de acordo com algumas regras.\n\n![Escala de cores Radix Colors](/posts/paleta-de-cores-perfeita-para-seu-projeto/escala-de-cores-radix-colors-light.png)\n\n## Criando paletas com o sistema de cores Radix Colors\n\nPara compor uma paleta de cores com o Radix Colors, **podemos come√ßar usando umas das 20 cores de destaque dispon√≠veis**. Dessas cores, 15 foram escolhidas para funcionarem bem com o texto em branco e 5 com o texto em preto.\n\n![Cores de destaque da Radix Colors](/posts/paleta-de-cores-perfeita-para-seu-projeto/cores-destaque-radix-colors.svg)\n\nDepois de escolher uma ou v√°rias cor de destaque, **precisamos de uma escala de cinza**. O Radix Colors v√™m com 6 escalas de cinza diferentes, criadas para combinarem com diferentes cores de destaque.\n\nPara um resultado mais natural, voc√™ pode escolher a escala de cinza de acordo com as suas cores de destaque:\n\n- `Gray` √© cinza puro, boa para uma combina√ß√£o mais neutra;\n- `Mauve` tem tonalidades de roxo e combina com `Tomato`, `Red`, `Crimson`, `Pink`, `Plum`, `Purple` e `Violet`;\n- `Slate` tem tonalidades de azul e combina com `Indigo`, `Blue`, `Sky` e `Cyan`;\n- `Sage` tem tonalidades de verde e combina com `Teal`, `Mint` e `Green`;\n- `Olive` tem tonalidades de lim√£o e combina com `Grass` e `Lime`;\n- `Sand` tem tonalidades de amarelo e combina com `Yellow`, `Amber`, `Orange` e `Brown`.\n\nDepois de ter nossa escala de cinza, o pr√≥ximo passo √© **escolher as cores sem√¢nticas**. Essas cores est√£o relacionadas com o que seus elementos querem comunicar, como um erro, sucesso ou informa√ß√£o.\n\n- **Erro**: `Red`, `Tomato` ou `Crimson`;\n- **Sucesso**: `Teal`, `Green`, `Grass` e `Mint`;\n- **Aviso**: `Yellow` ou `Amber`;\n- **Info**: `Blue`, `Sky` ou `Cyan`.\n\nVale a pena lembrar que essas combina√ß√µes fazem bastante sentido na cultura ocidental, mas seu significado pode ser diferente em outras culturas.\n\nEm aplica√ß√µes mais complexas, √© poss√≠vel que voc√™ escolha quase todas as cores para fazerem parte da sua paleta. O bom de usar um sistema de cores como o Radix Colors √© que todas as escalas de cores funcionam bem entre si.\n\nPara finalizar, **precisamos escolher as escalas de cores para nosso texto**. Existem duas formas de escolher as cores do texto com o Radix Colors.\n\nA primeira √© usando o n√∫mero 11 ou 12 da escala de uma das cores de destaque, que funcionam bem para textos de baixo-contraste e de alto-contraste respectivamente. Essas cores trar√£o um resultado mais colorido.\n\nSe voc√™ est√° procurando um resultado mais s√©rio, vale a pena usar o n√∫mero 11 ou 12 das escalas de cinza.\n\n![Cores de texto n√∫mero 11 em cor de fundo n√∫mero 3 no Radix Colors](/posts/paleta-de-cores-perfeita-para-seu-projeto/cores-texto-radix-colors.svg)\n\n## Usando escalas de cores efetivamente no seu site/aplicativo\n\nAs escalas de cores do Radix Colors s√£o numeradas do 1 ao 12. Esses n√∫meros nos ajudam a escolher os tons corretos para cada aplica√ß√£o. A [p√°gina de documenta√ß√£o do Radix Colors](https://www.radix-ui.com/docs/colors/palette-composition/understanding-the-scale) explica com detalhes quando usar cada tonalidade. Aqui vai um resumo:\n\n| N√∫mero | Aplica√ß√µes                                            |\n| ------ | ----------------------------------------------------- |\n| 1      | Cor de fundo do site/aplicativo                       |\n| 2      | Cor de fundo sutil                                    |\n| 3      | Cor de fundo de um elemento da interface              |\n| 4      | Cor de fundo durante o _hover_ de um elemento         |\n| 5      | Cor de fundo de elementos selecionados ou ativos      |\n| 6      | Bordas sutis e separadores                            |\n| 7      | Bordas de elementos da interface ou indicador de foco |\n| 8      | Cor da borda durante o _hover_ de um elemento         |\n| 9      | Cores de fundo s√≥lidas                                |\n| 10     | Cores de fundo s√≥lidas durante o _hover_              |\n| 11     | Texto de baixo-contraste                              |\n| 12     | Texto de alto-contraste                               |\n\n![Exemplos de aplica√ß√£o das Radix Colors](/posts/paleta-de-cores-perfeita-para-seu-projeto/exemplos-aplicacao-radix-colors.svg)\n\n## Usando o Radix Colors no seu projeto\n\nPara usar o Radix Colors no seu projeto, voc√™ deve instalar o pacote do npm `@radix-ui/colors`.\n\n```bash\nnpm install @radix-ui/colors\n\n# se estiver usando o yarn:\nyarn add @radix-ui/colors\n```\n\nTodas as escalas de cores est√£o dispon√≠veis como objetos JavaScript. Para us√°-las com `styled-components`, por exemplo, basta importar as cores que voc√™ quiser e interpolar seus valores no CSS.\n\n```js\nimport { gray, blue } from \"@radix-ui/colors\";\nimport styled from \"styled-components\";\n\nlet Button = styled.button`\n  background-color: ${gray.gray4};\n  color: ${blue.blue10};\n`;\n```\n\nSe voc√™ quiser usar as cores diretamente no CSS, sem uma biblioteca de CSS-in-JS, basta importar as cores que voc√™ quiser no CSS:\n\n```css\n@import \"@radix-ui/colors/gray.css\";\n@import \"@radix-ui/colors/blue.css\";\n\n.button {\n  background-color: var(--gray4);\n  color: var(--blue10);\n}\n```\n\nPara que esses `@import`s funcionem, voc√™ precisar√° utilizar um _bundler_ como Parcel, Webpack ou um framework que j√° fa√ßa o _bundle_ de imports CSS por baixo dos panos (NextJS, por exemplo).\n\nA [p√°gina de documenta√ß√£o do Radix Colors](https://www.radix-ui.com/docs/colors/getting-started/usage) tem muito mais exemplos de como us√°-lo em v√°rias configura√ß√µes diferentes.\n\n## Acessibilidade na sua paleta de cores\n\nUm passo bastante importante na escolha das cores do seu site/aplicativo √© verificar o contraste entre as cores utilizadas. Isso √© muito importante para assegurar que mais pessoas possam efetivamente ler e utilizar sua interface.\n\nOs [WCAG 2](https://webaim.org/articles/contrast/) define importantes requisitos de cor e contraste. Em geral, **precisamos de um contraste de 4.5:1 para texto, no m√≠nimo**.\n\nNo Radix Colors, os n√∫meros 11 e 12 de cada escala devem ter contraste suficiente com os n√∫meros 1 e 2. Os n√∫meros 9 de cada escala tamb√©m passam nas regras de contraste com texto preto ou branco.\n\nPara testar o contraste de elementos no Chrome, voc√™ pode usar a ferramenta de sele√ß√£o para inspe√ß√£o e colocar o mouse sobre um texto.\n\n![Verificando a acessibilidade de um texto com a ferramenta de sele√ß√£o para inspe√ß√£o do Chrome](/posts/paleta-de-cores-perfeita-para-seu-projeto/verificando-acessibilidade-chrome.png)\n\n## Continue aprendendo\n\nA biblioteca Radix UI √© bastante interessante. Al√©m desse pacote com cores, ela tamb√©m tem [componentes React acess√≠veis](https://www.radix-ui.com/docs/primitives), [√≠cones](https://icons.modulz.app/) e uma [biblioteca CSS-in-JS complet√≠ssima](https://stitches.dev/). Esses pacotes foram criados pela equipe por tr√°s do [Modulz](https://www.modulz.app/), uma ferramenta de design de interfaces baseada em c√≥digo com componentes reais.\n\nSe voc√™ est√° procurando por mais inspira√ß√£o para um sistema de cores, recomendo dar uma olhada tamb√©m na ferramenta de cores do [Material UI](https://material.io/resources/color/), no [Color Hunt](https://colorhunt.co/) e [Happy Hues](https://www.happyhues.co/).","src/pages/posts/paleta-de-cores-perfeita-para-seu-projeto/index.mdx","08c4237384d9f5ac","css-grid-posicionando-elementos-na-pratica",{"id":165,"data":167,"body":172,"filePath":173,"digest":174,"deferredRender":24},{"layout":14,"title":168,"description":169,"authorName":17,"authorImage":18,"pubDate":170,"ogImage":171},"CSS Grid: posicionando elementos no grid, na pr√°tica","Aprenda a utilizar grid-column e grid-row para posicionar elementos com CSS Grid.",["Date","2021-10-25T00:00:00.000Z"],"/posts/css-grid-posicionando-elementos-na-pratica/social.png","No post anterior dessa s√©rie, [aprendemos o b√°sico que precisamos saber sobre CSS Grid](/posts/css-grid-o-que-voce-precisa-saber) para us√°-lo em nossos projetos. Agora, vamos nos aprofundar em como posicionar elementos em um cont√™iner grid (elemento com `display: grid`).\n\n## √çndice\n\n## Definindo a posi√ß√£o de um elemento no cont√™iner grid\n\nAl√©m de definir o tamanho e quantidade de linhas e colunas em um cont√™iner grid, n√≥s podemos **definir a posi√ß√£o de cada elemento** separadamente.\n\nUsando `grid-column` e `grid-row`, podemos definir em qual coluna ou linha um item come√ßa e termina.\n\nPara come√ßar nossos exemplos, vamos criar uma `div` com a classe `container` com seis elementos dentro:\n\n```html\n\u003Cdiv class=\"container\">\n  \u003Cdiv class=\"item item-1\">Um\u003C/div>\n  \u003Cdiv class=\"item item-2\">Dois\u003C/div>\n  \u003Cdiv class=\"item item-3\">Tr√™s\u003C/div>\n  \u003Cdiv class=\"item item-4\">Quatro\u003C/div>\n  \u003Cdiv class=\"item item-5\">Cinco\u003C/div>\n  \u003Cdiv class=\"item item-6\">Seis\u003C/div>\n\u003C/div>\n```\n\nPara distribuir esses elementos, eu vou criar algumas linhas e colunas com `grid-template-columns` e `grid-template-rows`.\n\n```css\n.container {\n  display: grid;\n  grid-template-rows: 100px 200px 100px;\n  grid-template-columns: 100px 200px 200px;\n\n  background: #fff6fa;\n  width: max-content; /* impede que o cont√™iner seja maior que o tamanho do seu conte√∫do. */\n  gap: 10px;\n}\n\n.item {\n  background: #b688e0;\n  color: #6e33a6;\n}\n```\n\nO resultado √© um cont√™iner grid com tr√™s linhas e tr√™s colunas.\n\n![Exemplo de um grid com 3 linhas e 3 colunas, mas apenas 6 elemento](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-seis.svg)\n\nAlgumas das c√©lulas dispon√≠veis no nosso cont√™iner n√£o foram preenchidas, j√° que por padr√£o cada elemento vai ocupar uma c√©lula por vez.\n\nUsando `grid-row`, podemos mudar a posi√ß√£o de um elemento como o `.item-1` para qualquer linha.\n\n```css\n.item-1 {\n  grid-row: 2;\n  background: #5ed4b9; /* apenas para destacar o item-1 */\n}\n```\n\nAo usar `grid-row: 2`, o elemento `.item-1` ser√° posicionado na segunda linha. Na imagem a seguir, os n√∫meros das linhas e das colunas est√£o marcados para entendermos onde cada uma est√°.\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-1 com grid-row: 2](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-row.svg)\n\nVoc√™ pode perceber que os outros items do grid tamb√©m mudaram de posi√ß√£o. Por padr√£o o valor de `grid-row` e `grid-column` √© `auto`, o que significa que o algoritmo por tr√°s do posicionamento dos elementos decidir√° onde cada um ser√° posicionado, tentando n√£o deixar espa√ßos em branco.\n\n## Elementos que ocupam mais de uma linha ou coluna no cont√™iner grid\n\nAl√©m de receber o n√∫mero da linha ou coluna, as propriedades `grid-row` e `grid-column` tamb√©m podem receber valores como `1 / 3` ou `2 / 4`. Estes valores definem o n√∫mero da linha/coluna em que o elemento come√ßa e termina.\n\n```css\n.item-1 {\n  grid-row: 1 / 3;\n  background: #5ed4b9; /* apenas para destacar o item-1 */\n}\n```\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-1 com grid-row: 1 / 3](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-row-2.svg)\n\nPodemos usar `grid-row` e `grid-column` ao mesmo tempo para posicionar elementos com mais precis√£o.\n\n```css\n.item-1 {\n  grid-row: 2;\n  grid-column: 1 / 4;\n  background: #5ed4b9; /* apenas para destacar o item-1 */\n}\n```\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-1 com grid-row: 2 e grid-column: 1 / 4;](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-row-e-column.svg)\n\nDica: Escrever `grid-column: 1 / 4` √© a forma abreviada de usar as propriedades `grid-column-start` e `grid-column-end` ‚Äî assim como `grid-row` abrevia `grid-row-start` e `grid-row-end`.\n\nPara facilitar ainda mais a nossa vida, essas propriedades tamb√©m recebem n√∫meros negativos. N√∫meros negativos significam que contar as linhas/colunas de tr√°s pra frente. `-1` √© a √∫ltima, `-2` a pen√∫ltima...\n\n```css\n.item-1 {\n  grid-column: 1 / -1;\n  background: #5ed4b9; /* apenas para destacar o item-1 */\n}\n```\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-1 com grid-column: 1 / -1;](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-column-negativo.svg)\n\nEssas propriedades tornam poss√≠vel a cria√ß√£o de layouts bastante complexos com CSS Grid. A flexibilidade em tamanho de linhas e colunas, junto com a possibilidade de definir a posi√ß√£o de um elemento no cont√™iner grid abre um mar gigantesco de oportunidades que n√£o existem em outras formas de criar layouts com CSS.\n\n## Usando span em grid-column e grid-row\n\nAl√©m de valores absolutos, `grid-column` e `grid-row` tamb√©m podem receber valores de `span`, que significa dist√¢ncia em ingl√™s.\n\nUm uso comum para `span` √© definir que um elemento do cont√™iner grid deve ocupar uma certa quantidade de colunas:\n\n```css\n.item-1 {\n  grid-column: span 2;\n  background: #5ed4b9; /* apenas para destacar o item-1 */\n}\n```\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-1 com grid-column: span 2;](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-column-span.svg)\n\nO `span` tamb√©m pode ser utilizado como valor de `grid-column-start` ou `grid-column-end`. Nesses casos, `span` definir√° a quantidade de linhas/colunas que o elemento ocupar√° e onde ele come√ßar√°/terminar√°.\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-1 com grid-column e grid-row com span](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-grid-column-e-row-span.svg)\n\n## Sobrepondo elementos em um cont√™iner grid\n\nUsando `grid-column` e `grid-row`, conseguimos tamb√©m sobrepor elementos em um cont√™iner grid. Essa t√©cnica √© incr√≠vel.\n\nPara sobrepor elementos, voc√™ deve definir a posi√ß√£o dos elementos que quiser sobrepor no cont√™iner grid. Aqui vai um exemplo:\n\n```css\n.item-1 {\n  grid-column: 1 / span 2;\n  grid-row: 1 / span 3;\n}\n\n.item-3 {\n  grid-column: 2 / span 2;\n  grid-row: 2;\n  background: #5ed4b9; /* apenas para destacar o item-3 */\n}\n```\n\n![Exemplo de um grid com 3 linhas e 3 colunas e item-3 sobrepondo o item-1](/posts/css-grid-posicionando-elementos-na-pratica/exemplo-css-grid-sobreposicao.svg)\n\nEm vez de sobrepor elementos com `position: absolute` e posicionamento manual, sobrep√¥-los com CSS Grid garante que voc√™ possa aplicar todas as t√©cnicas de alinhamento e posicionamento que v√™m com essa forma de criar layouts.\n\nAssim fica f√°cil sobrepor elementos em layouts responsivos e que se adaptam ao conte√∫do.\n\n## Continue aprendendo\n\nAgora voc√™ j√° sabe posicionar elementos em um cont√™iner grid. Esse post faz parte de uma s√©rie sobre CSS Grid:\n\n- [CSS Grid: o b√°sico que voc√™ precisa saber (com exemplos)](/posts/css-grid-o-que-voce-precisa-saber);\n- [CSS Grid: posicionando elementos, na pr√°tica](/posts/css-grid-posicionando-elementos-na-pratica);\n- [CSS Grid: alinhando elementos (com exemplos)](/posts/css-grid-alinhando-elementos-na-pratica);\n- [Criando layouts responsivos com CSS Grid](/posts/criando-layouts-responsivos-css-grid);\n- [Usando grid-template-areas do CSS Grid](/posts/usando-grid-template-areas-do-css-grid);\n\nBons estudos!","src/pages/posts/css-grid-posicionando-elementos-na-pratica/index.mdx","4afda9241c7810fe","o-que-e-jamstack",{"id":175,"data":177,"body":182,"filePath":183,"digest":184,"deferredRender":24},{"layout":14,"title":178,"description":179,"authorName":17,"authorImage":18,"pubDate":180,"ogImage":181},"O que √© a Jamstack? Porqu√™ e como usar","Conhe√ßa mais sobre a arquitetura feita para construir sites mais r√°pidos, escal√°veis e seguros. Aprenda porqu√™ e como us√°-la.",["Date","2020-10-14T23:30:00.000Z"],"/posts/o-que-e-jamstack/social.png","import PageImage from '../../../components/PageImage.astro';\n\n**A Jamstack √© uma arquitetura criada para construir sites mais r√°pidos, que escalam com facilidade e que s√£o mais seguros. Antes mais conhecidos como \"sites est√°ticos\", esses sites s√£o geralmente um conjunto de arquivos HTML, CSS e JS que conversam com o servidor apenas quando necess√°rio.**\n\n\u003CPageImage src={import('./jamstack-grafico-base.png')} alt=\"O que √© a Jamstack, as tecnologias fundamentais e principais vantagens\" />\n\nUm dos motivos para a Jamstack estar se tornando t√£o popular √© a explos√£o de ferramentas poderosas que permitem criar sites que v√£o al√©m do que tradicionalmente sites \"est√°ticos\" faziam. Agora existem diversos CDNs especializados em entregar esses sites rapidamente para usu√°rios de qualquer lugar do mundo, ferramentas para integra√ß√£o e publica√ß√£o cont√≠nua, CMSs Headless perfeitos para sites Jamstack e ferramentas para cri√°-los sem dor de cabe√ßa.\n\nNeste guia completo para iniciantes, eu vou te explicar os porqu√™s de usar esta arquitetura, ferramentas para construir e publicas sites Jamstack e tamb√©m suas desvantagens.\n\n## √çndice\n\n## Arquitetura de um site JAMStack\n\nSites Jamstack utilizam uma arquitetura diferente de sites que utilizam um servidor backend tradicional. Sites que utilizam servidores ‚Äì como Wordpress, Laravel ou Rails ‚Äì geram uma resposta para cada vez que um usu√°rio requisita uma nova p√°gina. J√° sites Jamstack t√™m todas as suas p√°ginas pr√©-renderizadas antes de serem publicadas e podem ser servidos diretamente de uma Content Delivery Network (CDN) assim como j√° fazemos com imagens, v√≠deos e outros arquivos est√°ticos.\n\nO fato de sites Jamstack serem compilados para arquivos est√°ticos n√£o os torna menos capazes do que sites renderizados no servidor. Um grande motivo para o pessoal da [Netlify](https://www.netlify.com/) ter criado o termo \"Jamstack\" foi fugir do termo \"est√°tico\" ‚Äì como disse Mathias Biilmann [em um epis√≥dio do _JAMStack Radio_](https://www.netlify.com/blog/2016/09/15/the-jamstack-origin-story/). Usando JavaScript e consumindo APIs, sites Jamstack s√£o bastante din√¢micos e utilizam de arquivos est√°ticos apenas como uma forma de remover a necessidade de um servidor mais complexo.\n\nAs ferramentas utilizadas para criar sites Jamstack s√£o comumente chamadas de geradores est√°ticos. Os geradores est√°ticos mais utilizados s√£o o Hugo, Next.js e Gatsby. Para gerenciar o conte√∫do destes sites, normalmente utiliza-se arquivos Markdown ou um Headless CMS.\n\n## Por que construir um site usando Jamstack?\n\nA primeira vantagem de utilizar esta arquitetura √© a **performance**. Como o frontend j√° foi pr√©-renderizado antes da publica√ß√£o e estes arquivos normalmente s√£o servidos direto de uma CDN, o tempo de resposta de um site Jamstack tende a ser muito baixo. Utilizando ferramentas modernas como [Gatsby](#gatsby), o JavaScript utilizado dentro de cada p√°gina √© altamente otimizado e leve ‚Äì assim como o CSS √© reduzido a apenas o necess√°rio. √â inclusive bastante comum ver sites Jamstack atingirem altas pontua√ß√µes no [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/?hl=pt-br).\n\nUma outra vantagem de uma arquitetura baseada em arquivos est√°ticos √© a **escalabilidade**. Enquanto sites tradicionais baseados em um servidor din√¢mico dependem de camadas de cache para entregar p√°ginas com rapidez em momentos de altas cargas de tr√°fego, sites Jamstack j√° foram pr√©-renderizados. Tamb√©m n√£o √© necess√°ria a cria√ß√£o de l√≥gicas complexas de invalida√ß√£o de cache, j√° que a arquitetura e os geradores est√°ticos tomam conta disto por voc√™.\n\nComo sites Jamstack s√£o publicados como uma cole√ß√£o de arquivos est√°ticos, eles tamb√©m s√£o **facilmente port√°veis** para diferentes provedores como AWS, Netlify, Vercel e Google Cloud Platform.\n\n## Principais ferramentas para construir um site Jamstack\n\nNos √∫ltimos anos muitas ferramentas surgiram para construir sites com esta arquitetura, incluindo o Next.js, Gatsby, Hugo e outros geradores est√°ticos. Existem op√ß√µes para quem quer criar sites utilizando frameworks JavaScript como React e Vue ou at√© geradores est√°ticos com engines de templates mais tradicionais como Hugo e Jekyll.\n\nEscolher entre todas essas ferramentas pode ser uma tarefa bastante dif√≠cil. Abaixo eu trouxe uma lista com as op√ß√µes mais comuns e que eu recomendo para seu pr√≥ximo projeto. Al√©m destas tr√™s, existem muitas outras ferramentas listadas em [jamstack.org/generators/](https://jamstack.org/generators/).\n\n### Next.js\n\nO [Next.js](https://nextjs.org/) evoluiu muito desde sua primeira vers√£o. Na minha opini√£o, ele √© agora a ferramenta mais vers√°til para criar sites Jamstack. Criado pela Vercel, o Next.js √© um framework JavaScript bastante conhecido que usa como base o React e o Node.js.\n\nCom uma arquitetura simples e ferramentas de compila√ß√£o pr√©-configuradas, voc√™ rapidamente poder√° criar sites Jamstack com o Next.js. Al√©m de p√°ginas pr√©-renderizadas, voc√™ pode utiliz√°-lo tamb√©m para criar p√°ginas geradas no servidor e at√© rotas de API com Serverless Functions.\n\nToda a complexidade de configurar ferramentas como Webpack e Babel, otimizar bundles para publicar em produ√ß√£o, configurar um servidor para renderizar componentes React e criar todo um backend para algumas pequenas rotas de API somem ao usar o Next.js.\n\nSe voc√™ utiliza Vue ao inv√©s de React, tamb√©m vale a pena conferir o [Nuxt.js](https://nuxtjs.org/).\n\n### Gatsby\n\nO [Gatsby](http://gatsbyjs.com/) √© uma abordagem diferente para criar sites com React. Sua ideia principal √© juntar uma arquitetura baseada em plugins com o poder do GraphQL (uma linguagem de consulta de dados).\n\nCom mais de 2000 plugins, √© bastante simples integrar o Gatsby com diferentes fontes de dados como arquivos Markdown, Headless CMSs, planilhas, e bancos de dados. Ap√≥s adicionar e configurar um plugin, estes dados estar√£o dispon√≠veis no GraphQL.\n\nAssim como o Next.js, o Gatsby faz um grande trabalho por voc√™ para exportar um site Jamstack com alta performance sem que voc√™ tenha que passar muito tempo configurando o processo de compila√ß√£o.\n\nO [sistema de temas do Gatsby](https://www.gatsbyjs.com/plugins/?=gatsby-theme) tamb√©m √© bastante interessante. Temas do Gatsby juntam configura√ß√µes e plugins em um √∫nico pacote, oferecendo uma forma ainda mais simples de criar sites como blogs, lojas e wikis.\n\n### Hugo\n\nMais como um gerador de sites tradicional, o [Hugo](https://gohugo.io) √© um projeto em Go criado para ser extremamente r√°pido e vers√°til para criar sites est√°ticos.\n\nSem instalar plugins voc√™ pode trabalhar com diversos tipos de conte√∫do, taxonomias e conte√∫do din√¢mico de APIs. Al√©m disso, o sistema de templates do Hugo √© recheado de utilit√°rios para criar layouts diferentes para cada p√°gina, trabalhar com SEO, internacionaliza√ß√£o e at√© exportar o seu projeto para JSON ou AMP.\n\nExiste uma grande quantidade de temas para Hugo, que v√£o desde os criados para sites pessoais at√© temas para cria√ß√£o de apresenta√ß√£o de slides. Ao contr√°rio do Gatsby e do Next.js, Hugo n√£o usa React como sua linguagem de templates o que pode ser uma grande vantagem para quem n√£o planeja muitas intera√ß√µes renderizadas no lado do navegador ou n√£o quer prender o seu site nesta biblioteca JavaScript.\n\n## Os melhores Headless CMSs para seu projeto\n\nPara o conte√∫do que preenche os sites Jamstack, √© bastante comum utilizar um Headless CMS. Estes CMSs s√£o diferentes de CMSs mais tradicionais como o WordPress j√° que eles n√£o tocam na implementa√ß√£o da interface de usu√°rio que mostrar√° o conte√∫do. Em vez disso, eles oferecem uma API para que voc√™ possa consumir e renderizar o conte√∫do por conta pr√≥pria.\n\nA grande vantagem de utilizar um Headless CMS √© separar bem a cria√ß√£o do conte√∫do do c√≥digo do site. Dessa forma, times diferentes dentro de um projeto podem trabalhar no c√≥digo e no conte√∫do. Headless CMSs tamb√©m tendem a ser bastante flex√≠veis em como voc√™ pode organizar o conte√∫do e oferecem hospedagem de arquivos como imagens e v√≠deos.\n\nAlguns destes CMSs s√£o o Netlify CMS, Strapi e Ghost. Voc√™ pode conferir uma lista completa em [jamstack.org/headless-cms/](https://jamstack.org/headless-cms/).\n\n### Netlify CMS\n\nFeito pela empresa que cunhou o termo Jamstack e t√™m trabalhado para difundir esta arquitetura, o [Netlify CMS](https://www.netlifycms.org/) √© uma solu√ß√£o pr√°tica para criar conte√∫do para sites Jamstack. Nele todo o seu conte√∫do √© armazenado dentro de um reposit√≥rio git, te permitindo controlar o versionamento de conte√∫do integrado com o c√≥digo.\n\nAl√©m de ser open-source com uma licen√ßa MIT, o Netlify CMS pode ser extendido para acomodar as necessidades de edi√ß√£o de conte√∫do do seu projeto. Como ele roda como um webapp embutido em seu site, voc√™ n√£o precisa de um servidor para hosped√°-lo.\n\n### Strapi\n\nUma op√ß√£o ainda mais poderosa para usar como Headless CMS √© o [Strapi](https://strapi.io/). Com um plano gratuito praticamente completo e seu c√≥digo-fonte open-source, o Strapi √© uma boa alternativa para voc√™ auto-hospedar um Headless CMS.\n\nDentre as suas funcionalidades est√£o tipos de conte√∫do ilimitados, APIs REST e GraphQL, armazenamento de arquivos e m√≠dia, assim como controles de acesso de usu√°rios. Voc√™ pode hospedar sua inst√¢ncia do Strapi em servidores de sua escolha como na AWS, Digital Ocean ou Heroku.\n\n### Ghost\n\nMais um projeto de c√≥digo aberto, o [Ghost](https://ghost.org/) √© um CMS tradicional que tamb√©m oferece APIs para consumo de conte√∫do por geradores de sites Jamstack.\n\nAl√©m de poder criar seu conte√∫do, escolher um tema, gerar seu site e hosped√°-lo com o servi√ßo de hospedagem oficial, voc√™ pode controlar tudo por conta pr√≥pria assim como no Netlify CMS e Strapi. A grande diferen√ßa entre eles e o Ghost √© que ele √© bastante especializado em criar sites no estilo de blogs ou publica√ß√µes de jornal.\n\nO Ghost tamb√©m conta com uma [grande quantidade de integra√ß√µes](https://ghost.org/integrations/) para facilitar a sua vida e permitir que voc√™ construa um site bastante completo sem ter que sequer escrever uma √∫nica linha de c√≥digo.\n\n## Como publicar sites Jamstack\n\nSites Jamstack podem assumir diversas formas, dependendo das funcionalidades que voc√™ implementar e das ferramentas que utilizar. Por√©m, voc√™ provavelmente n√£o precisar√° muito mais do que uma CDN para hosped√°-los. Algumas boas op√ß√µes de servi√ßos que se especializaram em hospedar este tipo de sites s√£o: [Netlify](https://www.netlify.com/) e [Vercel](https://vercel.com/).\n\nAs duas plataformas s√£o muito similares e oferecem uma forma f√°cil de criar fluxos de integra√ß√£o cont√≠nua para seu reposit√≥rio git e publicar arquivos est√°ticos ou fun√ß√µes serverless em produ√ß√£o. Com diversas funcionalidades configuradas por voc√™, √© relativamente simples apontar uma destas plataformas para o reposit√≥rio do seu projeto, definir um dom√≠nio e publicar seu site.\n\nUma das funcionalidades que mais me chamou aten√ß√£o nos dois foi o \"deploy at√¥mico\". Para cada commit no seu reposit√≥rio, o Netlify e o Vercel criam um novo deploy e um link que pode ser acessado pra sempre. Isso torna simples pr√©-visualizar mudan√ßas antes de irem para produ√ß√£o ou comparar diferentes vers√µes antigas do seu site.\n\nAl√©m dos servi√ßos oferecidos pelos dois, a Netlify se destaca com alguns adicionais. L√° voc√™ pode criar fluxos de otimiza√ß√£o de arquivos como .html e imagens, testes A/B, integrar com um Analytics do lado do servidor, implementar autentica√ß√£o e at√© guardar dados de formul√°rios sem criar APIs manualmente.\n\nApesar destas platformas tornarem muito f√°cil a publica√ß√£o de sites Jamstack, voc√™ n√£o precisa utiliz√°-las. Em vez de uma plataforma tudo-em-um, pode fazer sentido para voc√™ publicar e hospedar o seu site em lugares como na AWS S3 ou at√© em VPSs da Digital Ocean.\n\n## Desvantagens de sites Jamstack\n\nTodas as arquiteturas v√™m com vantagens e desvantagens. J√° que o foco do Jamstack √© em pr√©-renderizar p√°ginas e utilizar JavaScript consumindo APIs para torn√°-las din√¢micas, sites que possuem p√°ginas com conte√∫do que mudam muito n√£o s√£o os melhores candidatos para esta arquitetura.\n\nAlguns exemplos de sites que seriam melhor implementados com outra arquitetura s√£o:\n\n- Webapps onde o conte√∫do muda de usu√°rio para usu√°rio em experi√™ncias logadas, principalmente os que exp√µem conte√∫do de acordo com n√≠veis diferentes de permiss√£o\n- Sites em que o conte√∫do se baseia em computa√ß√£o do lado do cliente, como ferramentas de edi√ß√£o de fotos ou blocos de notas.\n\nEntretanto, isso n√£o significa que as ferramentas que mencionamos aqui tamb√©m n√£o sejam √∫teis para estes tipos de sites. Com o Next.js, por exemplo, voc√™ pode implementar APIs, integr√°-las na cria√ß√£o da parte est√°tica do seu site e criar experi√™ncias que executam apenas no navegador ‚Äì tudo integrado em uma arquitetura simples e pr√©-configurada.\n\nMesmo que voc√™ n√£o esteja criando um site que combina perfeitamente com a arquitetura Jamstack, vale a pena utilizar alguns dos seus conceitos ‚Äì como a pr√©-renderiza√ß√£o de conte√∫do ‚Äì para melhorar a performance do seu projeto.\n\n## Continue aprendendo\n\nNeste artigo eu falei um pouco sobre o que √© a arquitetura Jamstack, porqu√™ utiliz√°-la, indiquei algumas ferramentas e tamb√©m mostrei algumas desvantagens. Existe bastante conte√∫do sobre o Jamstack, principalmente em ingl√™s. Se voc√™ quiser continuar aprendendo, d√° uma olhada nesta lista de recursos para seus estudos:\n\n- [NextJS, Gatsby ou Create React App? Entendendo os conceitos de SSR, SSG e SPA](https://willianjusten.com.br/nextjs-gatsby-ou-create-react-app-entendendo-os-conceitos-de-ssr-ssg-e-spa/)\n- [The issues with JAMStack: You might need a backend](https://www.browserlondon.com/blog/2020/04/20/issues-with-jamstack-you-might-need-backend/)\n- [Jamstack Best Practices](https://jamstack.org/best-practices/)\n- [The Jamstack origin story](https://www.netlify.com/blog/2016/09/15/the-jamstack-origin-story/)\n- [Gatsby.js Tutorials](https://www.gatsbyjs.com/tutorial/)\n- [Create a Next.js App](https://nextjs.org/learn/basics/create-nextjs-app)","src/pages/posts/o-que-e-jamstack/index.mdx","4939a721a0d0b968","scroll-snap-na-pratica",{"id":185,"data":187,"body":192,"filePath":193,"digest":194,"deferredRender":24},{"layout":14,"title":188,"description":189,"authorName":17,"authorImage":18,"pubDate":190,"ogImage":191},"Scroll Snap com CSS na pr√°tica","Com o Scroll Snap no CSS voc√™ consegue pular uma parte da p√°gina no scroll com elementos que se posicionam automaticamente. √ìtimo para sliders e se√ß√µes de uma p√°gina.",["Date","2021-06-09T00:00:00.000Z"],"/posts/scroll-snap-na-pratica/social.png","import Iframe from '../../../components/Iframe.astro'\n\nA quantidade de JavaScript que precisamos para criar webapps complexos tem crescido bastante, mas o CSS tamb√©m est√° correndo atr√°s de oferecer cada vez mais funcionalidades para estiliza√ß√£o e comportamento visual.\n\n**Scroll Snapping** (ou pular no scroll) √© uma t√©cnica bastante usada na web em componentes ou at√© sites inteiros para melhorar a experi√™ncia dos usu√°rios. **Com `snap-scroll-type` e outras propriedades, conseguimos implementar essa t√©cnica usando apenas CSS**.\n\n## √çndice\n\n## O b√°sico de Scroll Snapping com CSS\n\nSabe aquele site com se√ß√µes que tomam quase a tela inteira e que pulam o scroll para a pr√≥xima se√ß√£o? D√° para implementar essa funcionalidade com s√≥ um pouco de CSS.\n\n```html\n\u003Csection class=\"section section-1\">Se√ß√£o 1\u003C/section>\n\u003Csection class=\"section section-2\">Se√ß√£o 2\u003C/section>\n\u003Csection class=\"section section-3\">Se√ß√£o 3\u003C/section>\n\u003Csection class=\"section section-4\">Se√ß√£o 4\u003C/section>\n\u003Csection class=\"section section-5\">Se√ß√£o 5\u003C/section>\n\u003Csection class=\"section section-6\">Se√ß√£o 6\u003C/section>\n\u003Csection class=\"section section-7\">Se√ß√£o 7\u003C/section>\n\u003Csection class=\"section section-8\">Se√ß√£o 8\u003C/section>\n```\n\nCom esse HTML, podemos definir `scroll-snap-type: y mandatory` no **cont√™iner de scroll** (que nesse caso √© o pr√≥prio elemento `html`) e definir o lugar onde o scroll ir√° \"grudar\" com `scroll-snap-align: start`.\n\n```css\nhtml {\n  scroll-snap-type: y mandatory;\n}\n\n/* O Safari exige a defini√ß√£o no body */\nbody {\n  scroll-snap-type: y mandatory;\n}\n\n.section {\n  scroll-snap-align: start;\n  height: 70vh;\n}\n\n/* resto do CSS no Codepen */\n```\n\n\u003CIframe fullwidth height=\"600\" scrolling=\"no\" title=\"Scroll Snap na pr√°tica (Se√ß√µes horizontais)\" src=\"https://codepen.io/hugobessaa/embed/QWpVNLm?height=500&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n[Link para o Codepen](https://codepen.io/hugobessaa/pen/QWpVNLm).\n\nA propriedade `scroll-snap-type` recebe valores que indicam a dire√ß√£o (`x`, `y`, `both`, etc.) e o comportamento (`mandatory` e `proximity`). Ao usar `scroll-snap-type: y mandatory`, n√≥s estamos indicando que queremos que o scroll sempre \"pule e grude\" com elementos na vertical.\n\nPara definir os pontos de contato com os elementos que est√£o dentro do _cont√™iner de scroll_, usamos `scroll-snap-align`. Essa propriedade recebe valores como `start`, `end`, `center` e tamb√©m `none`.\n\n## Mandatory vs Proximity\n\nOs dois tipos de comportamento do `scroll-snap-type` s√£o `mandatory` e `proximity`.\n\nEm `mandatory`, o navegador sempre tentar√° \"pular e grudar\" no elemento mais pr√≥ximo. Esse √© o comportamento que normalmente queremos.\n\nCom `proximity`, o navegador s√≥ ir√° \"pular e grudar\" no elemento mais pr√≥ximo caso ele esteja realmente pr√≥ximo. A defini√ß√£o de \"pr√≥ximo\" varia de navegador para navegador. Apesar de um pouco confuso, esse comportamento pode ser muito √∫til se o usu√°rio precisa usar o scroll para ver mais conte√∫do de uma se√ß√£o e apenas \"pular\" para a pr√≥xima quando estiver perto dela.\n\n\u003CIframe fullwidth height=\"600\" scrolling=\"no\" title=\"Scroll Snap na pr√°tica (Se√ß√µes horizontais vs)\" src=\"https://codepen.io/hugobessaa/embed/qBrMYPL?height=500&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n[Link para o Codepen](https://codepen.io/hugobessaa/pen/qBrMYPL).\n\n## Scroll snapping na horizontal\n\nAl√©m de grandes se√ß√µes na vertical, scroll snapping √© bem √∫til em componentes menores, como uma lista horizontal. Com scroll snapping, podemos criar a mesma intera√ß√£o que muitos apps nativos como Netflix e App Store usam em suas listas.\n\n\u003CIframe fullwidth height=\"720\" scrolling=\"no\" title=\"Scroll Snap na pr√°tica (√çcones de Apps)\" src=\"https://codepen.io/hugobessaa/embed/KKWxzdB?height=500&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n[Link para o Codepen](https://codepen.io/hugobessaa/pen/KKWxzdB).\n\nNeste exemplo, podemos rolar a lista horizontal e o scroll ir√° \"pular e grudar\" em uma das caixas, impedindo que a lista fique em uma posi√ß√£o de scroll estranha.\n\nPara isso, basicamente criamos um _cont√™iner de scroll_ horizontal, usamos `scroll-snap-type: x mandatory` e definimos o ponto de contato das caixas com `scroll-snap-align: start`.\n\n```html\n\u003Csection class=\"horizontal-section\">\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n  \u003Cdiv class=\"app-icon\">\u003C/div>\n\u003C/section>\n```\n\n```css\n.horizontal-section {\n  overflow-x: scroll;\n  scroll-snap-type: x mandatory;\n}\n\n.app-icon {\n  scroll-snap-align: start;\n}\n\n/* resto do estilo no Codepen */\n```\n\nPara evitar que o scroll alinhe na borda do _cont√™iner_, adicionamos um `scroll-padding-left: 20px`. Assim o scroll \"gruda\" em uma posi√ß√£o que fica alinhada com outros elementos na tela e tamb√©m nos deixa ver uma parte das outras caixas.\n\n![Diagrama de como scroll-padding-left: 20px funciona](/posts/scroll-snap-na-pratica/scroll-padding.png)\n\nA propriedade `scroll-padding` recebe os mesmo valores que `padding`. Ela √© bem √∫til para controlar um pouco onde o scroll ir√° \"grudar\", principalmente se voc√™ tiver um elemento como um _header/menu_ fixo flutuando no topo da tela.\n\n## Scroll Snapping em 2D (vertical e horizontal)\n\nN√£o √© t√£o comum assim termos scroll vertical e horizontal ao mesmo tempo em um elemento, mas isso n√£o quer dizer que voc√™ n√£o possa fazer o snapping em 2D.\n\nPara \"pular e grudar\" o scroll vertical e horizontal, √© s√≥ usar `scroll-snap-type: both mandatory`. Talvez isso seja √∫til para quando voc√™ criar uma grande galeria de fotos.\n\n\u003CIframe fullwidth height=\"600\" scrolling=\"no\" title=\"Scroll Snap na pr√°tica (Galeria 2D)\" src=\"https://codepen.io/hugobessaa/embed/GRWXxXz?height=500&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n[Link para o Codepen](https://codepen.io/hugobessaa/pen/GRWXxXz).\n\n## Explorando as possibilidades do `scroll-snap-align`\n\nAl√©m de `start` que j√° vimos nos exemplo acima, a propriedade `scroll-snap-align` tamb√©m recebe valores como `center` e `end`. Isso muda bastante o comportamento.\n\nPara ficar mais f√°cil de visualizar a diferen√ßa entre esses valores, eu criei [esse Codepen](https://codepen.io/hugobessaa/pen/bGqxKxj) demonstrando `start`, `center` e `end` lado-a-lado. Nele, temos linhas tracejadas em vermelho mostrando onde o scroll vai tentar \"grudar\".\n\n\u003CIframe fullwidth height=\"600\" scrolling=\"no\" title=\"Scroll Snap na pr√°tica (Comparando align)\" src=\"https://codepen.io/hugobessaa/embed/bGqxKxj?height=500&theme-id=dark&default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen />\n\n[Link para o Codepen](https://codepen.io/hugobessaa/pen/bGqxKxj).\n\nUm dos valores que eu mais gosto para o `scroll-snap-align` √© `center`, porque ele deixa voc√™ facilmente criar componentes como um carrossel (tamb√©m conhecido como _slider_).\n\n## Diferen√ßas entre navegadores\n\nO suporte dos navegadores para Scroll Snapping √© [bastante bom](https://caniuse.com/css-snappoints), mais de 91% dos usu√°rios no mundo. Apesar da especifica√ß√£o ser bem suportada, ela ainda √© um rascunho e deve ser utilizada para progressivamente melhorar a experi√™ncia do usu√°rio. Alguns navegadores implementam apenas parte da [especifica√ß√£o atual](https://drafts.csswg.org/css-scroll-snap-1).\n\nAl√©m disso, a especifica√ß√£o √© subjetiva em algumas √°reas, dando aos navegadores a discri√ß√£o de implementar o algoritmo de snapping. Antes de aplicar Scroll Snap em seu projeto em produ√ß√£o, teste em diversos navegadores usados pelos seus usu√°rios.\n\n## Continue aprendendo\n\nVimos apenas uma parte do Scroll Snapping no CSS neste post. Abaixo, separei algumas refer√™ncias que utilizei para criar este post e seus exemplos:\n\n- [CSS Scroll Snap Module Level 1 (drafts.csswg.org)](https://drafts.csswg.org/css-scroll-snap-1)\n- [Practical CSS Scroll Snapping(css-tricks.com)](https://css-tricks.com/practical-css-scroll-snapping/)\n- [CSS Scroll Snap (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap/)\n- [Basic concepts of CSS Scroll Snap (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap/Basic_concepts)\n\nBons estudos!","src/pages/posts/scroll-snap-na-pratica/index.mdx","eca6ff3112f50e82","tres-habitos-css-escalavel",{"id":195,"data":197,"body":202,"filePath":203,"digest":204,"deferredRender":24},{"layout":14,"title":198,"description":199,"authorName":17,"authorImage":18,"pubDate":200,"ogImage":201},"3 h√°bitos para escrever CSS escal√°vel","O que voc√™ precisa saber para escrever CSS que escala junto com o seu projeto.",["Date","2019-05-24T12:32:00.000Z"],"/posts/tres-habitos-css-escalavel/social-image.png","import Iframe from \"../../../components/Iframe.astro\";\n\n_Este artigo tamb√©m est√° dispon√≠vel como [slides][slides] e no [YouTube][youtube]._\n\nCom cerca de 360 propriedades, n√£o faltam muitas coisas para voc√™ conseguir\nestilizar basicamente qualquer coisa usando a vers√£o atual do CSS. O maior\nproblema na verdade est√° como solucionar problemas de estiliza√ß√£o de uma forma\nescal√°vel. Escal√°vel para que seu c√≥digo seja flex√≠vel o suficiente para n√£o\nter que ser completamente reescrito no pr√≥ximo redesign que com certeza vai\nacontecer, e tamb√©m escal√°vel para que seu time possa continuar mantendo\no c√≥digo por muitos anos.\n\nEm meio a tantos frameworks diferentes e t√©cnicas como Flexbox, Grid CSS,\nfloats, e at√© CSS-in-JS, √© dif√≠cil olhar atrav√©s do superficial e achar as boas\npr√°ticas e h√°bitos essenciais para escrever CSS que dura.\n\nAp√≥s muitos anos como desenvolvedor front-end acabei desvendando alguns\nh√°bitos que me levam a escrever CSS mais escal√°vel. Agora, quase sempre que\nencontro estilos dif√≠ceis de lidar ou que d√£o bastante trabalho para refatorar,\npercebo que eles n√£o seguem um dos tr√™s princ√≠pios b√°sicos que vou te ensinar.\n\nAprender a escrever CSS escal√°vel √© essencial, j√° que independente da sua\nabordagem para criar interfaces de usu√°rio na web, voc√™ vai precisar\nestiliz√°-la. E, por mais bonita e bem planejada que seja, esta mesma interface\nde usu√°rio vai passar por muitas mudan√ßas conforme o produto √© alterado. Novas\nfuncionalidades precisam de espa√ßo. O posicionamento de alguns elementos s√£o\ntrocados para melhorar a experi√™ncia do usu√°rio. Novas p√°ginas s√£o criadas.\nEstilos mais \"modernos\" s√£o propostos. Tr√™s h√°bitos podem nos ajudar a passar\npor tudo isso com menos dor de cabe√ßa.\n\n\u003CIframe\n  src=\"https://www.youtube.com/embed/URR5X1LHIGQ\"\n  height=\"500\"\n  title=\"YouTube video player\"\n  frameBorder=\"no\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n/>\n\n## Abrir m√£o do posicionamento\n\nCom CSS n√≥s podemos posicionar qualquer elemento em qualquer lugar. Apesar\ndisso, n√£o √© sempre que devemos usar `position: fixed` ou `position: absolute`\npara controlar exatamente em qual pixel na tela um elemento estar√°. Abrir m√£o\ndo posicionamento de um elemento vai ainda mais longe do que isso.\n\nCada vez que tentamos controlar o posicionamento de um elemento, este elemento\nse torna menos reutiliz√°vel em diferentes contextos e talvez precise ser\nrefatorado quando o layout das p√°ginas em que s√£o utilizados forem alterados.\n\nVamos imaginar que temos um componente `Botao`. Por componente, eu quero dizer\num conjunto de HTML, CSS e JS que trabalham juntos ‚Äì usando ou n√£o um\nframework. Este componente geralmente √© utilizado em conjunto com outros bot√µes\nna nossa interface de usu√°rio. Para posicionar estes componentes poder√≠amos\nrecorrer a seletores CSS como `.botao + .botao`, adicionando um pouco de\n`margin` entre cada bot√£o. Dessa forma, qualquer lugar que usasse `Botao` teria\no espa√ßamento entre eles padronizado.\n\nO problema dessa solu√ß√£o √© que ela n√£o √© escal√°vel. No momento que quisermos\ntrocar um `Botao` por um `Link`, este espa√ßamento n√£o seria mais aplicado.\nConforme estas excess√µes se tornam a regra, poder√≠amos acabar com diversos\nseletores muito espec√≠ficos: `.botao + .link`, `.link + .botao` e\n`.link + .link`. √â invi√°vel tentar lidar com espa√ßamento autom√°tico entre\ncomponentes porque n√£o temos certeza de como eles ser√£o utilizados em conjunto\nno futuro.\n\n![imagem com um bot√£o e um link sem espa√ßamento entre\neles](/posts/tres-habitos-css-escalavel/botao-botao.png)\n\nUma forma melhor de espa√ßar componentes e evitar este problema com seletores\nespec√≠ficos √© dar ao componente que os engloba a responsabilidade de\nespa√ß√°-los. Um componente de `Fomulario`, por exemplo, poderia ditar os estilos\nde espa√ßamento entre cada `Botao`, `Link` e `Input`. Controlando o espa√ßamento\nde cima pra baixo na hierarquia dos componentes torna o CSS muito mais\nescal√°vel por permitir que componentes de baixo n√≠vel possam ser utilizado em\ncontextos completamente diferentes ao mesmo tempo sem que eles tenham que ter\nestilos espec√≠ficos para cada um desses contextos.\n\n## Abrir m√£o do tamanho\n\nAssim como abrir m√£o do posicionamento, abrir m√£o do tamanho tamb√©m √© um √≥timo\nh√°bito para escrever CSS escal√°vel. Em uma p√°gina de galeria, por exemplo, n√≥s\npoder√≠amos estilizar o componente `Figura` de tal forma que seu `width` estaria\nfixo em `300px`, j√° que este √© o tamanho exato deste elemento no design. Por√©m,\nse decidirmos utilizar `Figura` dentro de um elemento maior ou menor, n√≥s\nter√≠amos problemas.\n\nAo abrir m√£o do espa√ßamento, delegamos ao m√°ximo a defini√ß√£o real do tamanho de\num elemento na tela. Isso significa que quase todos os seus componentes seriam\nestilizados com `width: 100%`, de modo que quem os engloba pode decidir seu\ntamanho real final.\n\n![images de uma galeria de imagens com Figura em diversos\ntamanhos](/posts/tres-habitos-css-escalavel/galeria-diversa.png)\n\nExistem alguns casos em que n√£o √© poss√≠vel abrir m√£o do tamanho dos nossos\ncomponentes. √â, por exemplo, muito dif√≠cil estilizar um componente complexo\npara comportar tamanhos muito grandes e muito pequenos sem o uso de _media\nqueries_. N√£o existe hoje uma forma de estilizar um componente baseado em seu\ntamanho na tela, j√° que ainda n√£o temos algo como [Container\nQueries][container-queries] no CSS.\n\nMantenha sempre em mente que \u003Cmark>nenhuma solu√ß√£o t√©cnica vem sem\ndesvantagens\u003C/mark>. Para componentes assim, talvez o ideal seja ter diferentes\nvers√µes dos seus estilos que podem ser utilizadas usando uma classe no elemento\nprincipal para definir uma vers√£o \"enxuta\" ou \"completa\".\n\n## Deixar o conte√∫do fluir\n\nConte√∫do √© quase sempre o centro de um design. E em muitas interfaces de\nusu√°rio din√¢micas, √© muito dif√≠cil saber ao certo o tamanho de um texto, imagem\nou v√≠deo. Bot√µes podem ter mais texto do que cabe em apenas uma linha. Imagens\ntalvez sejam estreitas e n√£o quadradas. T√≠tulos podem ter palavras que n√£o\ncabem inteiras na largura de um dispositivo m√≥vel. Conte√∫do √© din√¢mico, e seus\ncomponentes devem deix√°-lo fluir.\n\nExistem basicamente duas maneiras de lidar com a diversidade de conte√∫do:\nfor√ßar o conte√∫do para se adaptar ao seu componente (abordagem controlada)\ne adaptar o componente ao conte√∫do (abordagem flu√≠da).\n\n### Abordagem controlada\n\nPara for√ßar o conte√∫do a se adaptar a um componente, podemos usar `overflow: hidden`, `width` e `height` fixos, `text-overflow: ellipsis` e muitas outras\nregras. Esta abordagem normalmente √© necess√°ria quando temos que manter um\nbalan√ßo e prevenir que um conte√∫do gerado pelos usu√°rios quebre a interface.\n\n![imagem de uma figura com sua descri√ß√£o incompleta](/posts/tres-habitos-css-escalavel/chicago-controlada.png)\n\nO problema de tentar controlar o conte√∫do √© que uma mudan√ßa nos requerimentos\ndeste conte√∫do pode nos for√ßar a refatorar todos os componentes que n√£o se\nadaptam ao conte√∫do.\n\n### Abordagem flu√≠da\n\nUma outra forma de lidar com conte√∫do √© com uma abordagem flu√≠da. Se quase\ntodos os nossos componentes seguirem essa abordagem, teremos uma interface de\nusu√°rio flex√≠vel que se adapta tanto ao conte√∫do quanto ao dispositivo. O CSS\ntende a nos levar por este caminho, j√° que a maioria dos valores padr√£o foram\ndefinidos com o intuito de deixar o conte√∫do fluir. Novas t√©cnicas de layout\ncomo Flexbox e Grid CSS tamb√©m t√™m valores padr√£o onde o conte√∫do √© uma parte\nbastante importante nas defini√ß√µes de posicionamento e espa√ßamento.\n\nPode ser um pouco assustador n√£o ter o controle total de como um componente ou\ntoda a sua interface de usu√°rio aparecer√° para o usu√°rio final. Ao usar algumas\nregras como `overflow-wrap: break-word` e `min-width: 200px` definimos limites\nde como o conte√∫do vai fluir dentro dos nossos componentes, tendo um pouco mais\nde controle, mas n√£o o suficiente para limitar demais o conte√∫do.\n\n![imagem de uma figura com sua descri√ß√£o completa](/posts/tres-habitos-css-escalavel/chicago-fluida.png)\n\n√â claro que voc√™ pode misturar a abordagem flu√≠da com a controlada. Esta\n√© normalmente a forma que eu implemento componentes que recebem conte√∫do\nbastante diverso. Voc√™ pode precisar controlar o tamanho do t√≠tulo\ne a quantidade m√°xima de palavras na descri√ß√£o de uma imagem, guiando quem\nescreve o conte√∫do a se encaixar em um meio-termo entre liberdade e controle.\n\n## Desenvolva os seus h√°bitos\n\nN√£o √© f√°cil desenvolver interfaces para a web, principalmente para produtos que\nevoluem em um ritmo constante. Escrever sobre estes tr√™s h√°bitos √© o resultado\nde muitos anos trabalhando em diversos projetos dos mais variados tamanhos. Com\ncerteza existem muitos outros h√°bitos que podemos seguir para escrever CSS\nescal√°vel, talvez alguns que eu at√© siga sem mesmo perceber ou formalizar.\n\nDocumentar problemas e solu√ß√µes encontradas pode ser um √≥timo caminho para voc√™\ncome√ßar a descobrir os seus pr√≥prios h√°bitos. Lembre de utilizar cada uma das\n360 propriedades do CSS com uma coisa em mente: nunca faltar√£o tarefas para\nalterar interfaces de usu√°rio. Abrir m√£o do posicionamento, abrir m√£o do\ntamanho e deixar o conte√∫do fluir s√£o s√≥ algumas boas pr√°ticas que podemos\nseguir para manter nossos projetos em ordem mesmo ap√≥s anos de trabalho.\n\n[container-queries]: https://alistapart.com/article/container-queries-once-more-unto-the-breach/\n[slides]: https://speakerdeck.com/hugooliveirad/tres-habitos-para-escrever-css-escalavel\n[youtube]: https://www.youtube.com/watch?v=URR5X1LHIGQ","src/pages/posts/tres-habitos-css-escalavel/index.mdx","02362aa3a74945de","criando-animacoes-perfeitas-com-css",{"id":205,"data":207,"body":212,"filePath":213,"digest":214,"deferredRender":24},{"layout":14,"title":208,"description":209,"authorName":17,"authorImage":18,"pubDate":210,"ogImage":211},"Criando anima√ß√µes perfeitas com CSS animation e transition","Mergulhe fundo em como criar e debugar anima√ß√µes CSS perfeitas, entendendo o fluxo de renderiza√ß√£o dos navegadores.",["Date","2021-05-19T00:00:00.000Z"],"/posts/criando-animacoes-perfeitas-com-css/social.png","import Iframe from '../../../components/Iframe.astro'\n\nAnima√ß√µes perfeitas d√£o aquele toque elegante em um site, n√£o √© mesmo? Voc√™ toca em um bot√£o, um movimento suave acontece; abre o menu, uma transi√ß√£o perfeita te leva para outro contexto. Desde que o CSS3 virou algo suportado pelos navegadores mais utilizados, a web tem √≥timas ferramentas para criar anima√ß√µes (`animation`) e transi√ß√µes (`transition`). Mesmo que essas ferramentas j√° estejam entre a gente por um temp√£o, ainda √© dif√≠cil criar interfaces de usu√°rio com movimentos perfeitos.\n\nNossos olhos s√£o muito bons em perceber movimento e nossa cabe√ßa √© muito boa em sinalizar quando algo n√£o est√° funcionando do jeito certo. Como a maior parte das nossas telas √© capaz de reproduzir 60 _frames_ por segundo (fps), n√≥s estamos muito acostumados a ver essa taxa de atualiza√ß√£o em todos os movimentos que acontecem em interfaces de usu√°rio. Para nossas anima√ß√µes serem perfeitas, elas precisam se encaixar nessa taxa de atualiza√ß√£o. Vamos entender o porqu√™.\n\n## √çndice\n\n## O que faz uma anima√ß√£o ou transi√ß√£o ser perfeita?\n\nEm uma tela que atualiza sua imagem a uma taxa de 60fps, o navegador precisa calcular onde cada elemento do seu site aparecer√° na tela a cada frame. **Para ser perfeita, o movimento da sua anima√ß√£o precisa acontecer a cada 16ms** (1000 milissegundos / 60 frames = 16,66). Isso significa que, nesses 16ms, o navegador precisa executar seu c√≥digo, verificar qualquer mudan√ßa na posi√ß√£o de todos os elementos e calcular onde eles estar√£o.\n\n![Exemplo de anima√ß√£o a 60 frames por segundo](/posts/criando-animacoes-perfeitas-com-css/exemplo-de-animacao-a-60-quadros-por-segundo.png)\n\nPara sites que n√£o mudam a posi√ß√£o de seus elementos, o navegador consegue evitar trabalho e calcular apenas uma vez onde cada peda√ßo estar√°. Quando acionamos anima√ß√µes, o navegador precisa calcular a posi√ß√£o dos nossos elementos a cada frame ‚Äî a cada intervalo de 16ms. **Entender esse processo de computa√ß√£o e renderiza√ß√£o √© essencial para criar anima√ß√µes e transi√ß√µes perfeitas com CSS** usando `animation` e `transition`.\n\nToda vez que o c√°lculo para renderizar o novo frame de uma anima√ß√£o dura mais do que o tempo para atualizar a tela, n√≥s \"perdemos frames\". Isso significa que um frame deixou de ser renderizado. **A perda de frames √© o que tira a fluidez de uma anima√ß√£o** e traz uma experi√™ncia ruim para o usu√°rio.\n\n![Exemplo de quando um frame com 25ms √© perdido](/posts/criando-animacoes-perfeitas-com-css/exemplo-frame-perdido-com-25-ms.png)\n\n## Fluxo de renderiza√ß√£o do navegador\n\nTodos os navegadores atuais (Chrome, Firefox, Safari, Edge) adotam um fluxo de renderiza√ß√£o parecido. Esse fluxo (_rendering pipeline_, em ingl√™s) √© [dividido em quatro fases](https://web.dev/animations-overview/):\n\n1. **Style**: Na primeira fase, o navegador calcula quais ser√£o os valores de cada propriedade CSS de cada elemento da tela.\n1. **Layout**: Com os valores em m√£os, calcula-se a disposi√ß√£o de todos os elementos na tela.\n1. **Paint**: O navegador agora cria instru√ß√µes de renderiza√ß√£o de todos os elementos dividos em cada camadas.\n1. **Composite**: Por fim, comp√µe todas as camadas na tela.\n\nComo todo esse processo precisa se encaixar em 16ms durante uma anima√ß√£o para que ela n√£o \"engasgue\", todos os navegadores modernos possuem otimiza√ß√µes para passar a menor quantidade de tempo em cada fase ou at√© pul√°-las. Para criar anima√ß√µes perform√°ticas precisamos evitar trabalho.\n\n![Fluxo de renderiza√ß√£o de um navegador. Style, Layout, Paint, Composite](/posts/criando-animacoes-perfeitas-com-css/fluxo-de-renderizacao-de-um-navegador.png)\n\nNa **fase Style**, o navegador basicamente calcula qual √© o estilo a ser computado para cada elemento na p√°gina, cada n√≥ do DOM. Por n√£o envolver computa√ß√£o pesada, esta fase geralmente √© bem r√°pida e n√£o representa um problema de performance.\n\n## Como evitar trabalho durante uma anima√ß√£o CSS\n\nAp√≥s saber o estilo a ser aplicado em cada elemento, o navegador pode iniciar a **fase de Layout**. Nela ser√° calculada a disposi√ß√£o de cada elemento e a ordem em que eles ser√£o renderizados na p√°gina. Em sites com √°rvores do DOM muito grandes, a fase de Layout pode demorar um tempo consider√°vel e prejudicar a taxa de frames por segundo em uma anima√ß√£o.\n\nExistem v√°rias propriedades CSS que, quando mudadas, podem levar o navegador a iniciar a fase de Layout. `width`, `height`, `padding` e `margin` s√£o algumas delas que tendemos a animar com mais frequ√™ncia. Como uma mudan√ßa em um elemento no meio da p√°gina pode afetar a disposi√ß√£o de toda a p√°gina, animar essas propriedades pode gerar um grande trabalho a cada frame. Se poss√≠vel, evite animar essas propriedades.\n\nA fase de Layout gera uma representa√ß√£o da p√°gina em uma **√Årvore de Layout**.\n\n![Exemplo de uma √Årvore de Layout criada a partir de um site](/posts/criando-animacoes-perfeitas-com-css/arvore-de-layout.png)\n\nAp√≥s calcular o posicionamento dos elementos, o navegador iniciar√° a **fase de Paint**. Aqui, o navegador calcula em que ordem todos os elementos devem ser renderizados, camada por camada, gerando uma representa√ß√£o dos comandos necess√°rios para mostrar o que o usu√°rio ver√° na tela. **A √Årvore de Layout √© transformada em Registros de Paint**.\n\n![Exemplo de uma √Årvore de Layout transformada em registros de paint](/posts/criando-animacoes-perfeitas-com-css/registros-de-paint.png)\n\nEsta fase pode demandar bastante recurso, ent√£o o navegador tenta ao m√°ximo diminuir a √°rea da tela que precisa ser computada. Caso nenhum elemento tenha mudado sua apar√™ncia na tela, a fase de Paint ser√° pulada.\n\nAs propriedades que geralmente animamos que sempre demandam uma fase de Paint s√£o as que controlam posicionamento (`top`, `left`, `right`, `bottom`), tamanho (`width`, `height`, `padding`, `margin`) e cor (`background`, `color`).\n\n## Criando anima√ß√µes de alta-performance com Composite Layers\n\nAp√≥s a fase de Layout, **o navegador precisa transformar os Registros de Paint em pixels**. Este processo se chama de _rasteriza√ß√£o_ e ocorre durante a **fase Composite** (presente na grande maioria dos navegadores atuais).\n\nNesta fase, o navegador _rasteriza_ diferentes camadas da interface de usu√°rio e usa a GPU para compor estas camadas e tirar um pouco do peso do c√°lculo da CPU.\n\n![Exemplo da rasteriza√ß√£o de cada camada](/posts/criando-animacoes-perfeitas-com-css/rasterizacao.png)\n\nPara otimizar o uso de recursos do seu computador, o Chrome rasteriza n√£o s√≥ a parte que voc√™ est√° vendo na tela, mas boa parte dos elementos da p√°gina. E, em vez de criar apenas uma imagem com a composi√ß√£o dos elementos, o Chrome divide certos elementos e camadas diferentes, permitindo que a composi√ß√£o final seja feita na GPU.\n\nComo os c√°lculos da fase Composite rodam na thread de Composition e n√£o influenciam na performance da thread principal, anima√ß√µes que usam a fase Composite s√£o muito mais perform√°ticas do que as que dependem das fases de Layout e Paint. Isto se deve a evitar a frequente e pesada _rasteriza√ß√£o_ de camadas sem necessidade.\n\n![Exemplos de camadas rasterizadas](/posts/criando-animacoes-perfeitas-com-css/camadas-rasterizadas.png)\n\nSe n√£o devemos animar `width` ou `margin` e √© bom evitar mudan√ßas em `background` e `top`, o que usar ent√£o? Que bom que voc√™ perguntou.\n\nAs propriedades que, quando animadas, geram camadas que ser√£o usadas na fase Composite s√£o:\n\n- `opacity`\n- `transform: scale()`\n- `transform: translate()`\n- `transform: rotate()`\n- `transform: skew()`\n- `transform: matrix()`\n\n![Exemplos de anima√ß√£o com transform: translate3d(20px, 20px, 0)](/posts/criando-animacoes-perfeitas-com-css/animacao-com-transform-translate3d.png)\n\nNa minha experi√™ncia, elas s√£o mais do que suficientes para boa parte das anima√ß√µes que criamos para melhorar a experi√™ncia do usu√°rio.\n\nBoa parte dos computadores e celulares t√™m GPUs boas o suficiente para criarmos anima√ß√µes bastante complexas com `opacity` e `transform`.\n\n## Visualizando/debugando anima√ß√µes e o fluxo de renderiza√ß√£o do navegador\n\nO Chrome possui uma incr√≠vel ferramenta que pode nos ajudar a entender todo o fluxo de renderiza√ß√£o e o que acontece durante anima√ß√µes. Essa ferramenta est√° dispon√≠vel no [Chrome Developer Tools (DevTools)](/posts/atomo-chrome-developer-tools), na aba **Performance**.\n\nAo clicar no bot√£o de grava√ß√£o, o DevTools ir√° guardar dados de tudo que est√° acontecendo na tela e por baixo dos panos no fluxo de renderiza√ß√£o. Assim que voc√™ parar de gravar, a ferramenta ficar√° recheada de informa√ß√µes para explorarmos:\n\n- Linha do tempo com principais eventos e gr√°ficos;\n- Frames e seu tempo de renderiza√ß√£o;\n- Tarefas na thread Principal;\n- V√°rias outras informa√ß√µes sobre a rede, uso da GPU, rasteriza√ß√£o, etc.\n\n![Aba de Performance do DevTools do Chrome com um relat√≥rio de performance do site da Tesla](/posts/criando-animacoes-perfeitas-com-css/aba-performance-devtools-chrome.png)\n\nPara aprender um pouco mais sobre a aba Performance do DevTools, vamos visitar um site bastante bonito que possui anima√ß√µes sutis, mas que fazem toda a diferen√ßa durante a navega√ß√£o: tesla.com.\n\nNa [p√°gina do Model Y](https://tesla.com/modely), anima√ß√µes s√£o iniciadas conforme rolamos a p√°gina para ver mais conte√∫do. Ao gravar essa intera√ß√£o no meu computador, pude perceber algumas anima√ß√µes com problemas e outras perfeitas.\n\nO interessante deste relat√≥rio da aba Performance √© que podemos ir mais fundo nestes problemas e tentar entend√™-lo, mesmo sem conhecer o c√≥digo-fonte do site.\n\nA linha do tempo no topo do relat√≥rio mostra alguns ret√¢ngulos vermelhos. Ao focar nestes frames com problemas, podemos ver que um deles demorou cerca de 146ms para ser renderizado ‚Äî um n√∫mero muito acima do ideal de 16ms.\n\n![Frame longo na p√°gina do Model Y no site da Tesla](/posts/criando-animacoes-perfeitas-com-css/frame-longo-no-site-da-tesla.png)\n\nNas informa√ß√µes da thread principal, podemos ver que a fase de Style ocupou sozinha 52ms. Ela veio logo ap√≥s uma chamada m√©todo `scrollTo` no JavaScript. Este m√©todo gera **Layout Trashing**, o que for√ßa o rec√°lculo dos estilos de todos os elementos no DOM e c√°lculos da fase de Layout.\n\n![Frame longo na p√°gina do Model Y no site da Tesla](/posts/criando-animacoes-perfeitas-com-css/frame-longo-recalculate-style-site-da-tesla.png)\n\nDepois dessa parte mais pesada na performance, as anima√ß√µes s√£o bem mais leves e perform√°ticas. No quadro abaixo, podemos explorar o qu√£o r√°pidas anima√ß√µes podem ser quando fazem uso de camadas na fase Composite.\n\n![Frame curto de uma anima√ß√£o usando Composite Layers](/posts/criando-animacoes-perfeitas-com-css/frame-curto-usando-composite-layers.png)\n\nNeste caso, foram **apenas 42 microssegundos necess√°rios para a fase Composite** e 2,72 milissegundos para todo o frame.\n\n## A (m√°) influ√™ncia do JavaScript em anima√ß√µes CSS\n\nN√£o √© s√≥ o CSS que influencia no fluxo de renderiza√ß√£o e na performance das anima√ß√µes CSS. C√≥digo JavaScript tamb√©m pode influenciar nessas anima√ß√µes, como vimos no exemplo do site da Tesla.\n\nComo as fases de Style, Layout e Paint s√£o executadas na thread principal do navegador, qualquer outro c√≥digo JavaScript que estiver sendo executado ao mesmo tempo vai tomar espa√ßo dentro do fluxo de renderiza√ß√£o.\n\nAl√©m disso, alguns m√©todos e propriedades no JavaScript afetam diretamente o fluxo de renderiza√ß√£o. Esses m√©todos e propriedades geram o que chamamos de **Layout Thrashing**. Usar `element.getBoundingClientRect()`, por exemplo, obriga o navegador a recalcular os estilos do elemento e passar pela fase de Layout para gerar o resultado da chamada deste m√©todo.\n\n```js\nbutton.addEventListener(\"click\", (event) => {\n  // A chamada deste m√©todo gera Layout Thrasing\n  console.log(button.getBoundingClientRect());\n});\n```\n\nA lista de m√©todos e propriedades que geram Layout Thrashing √© bem extensa e difere um pouco entre diferentes navegadores. O Paul Irish criou o documento [What forces layout / reflow](https://gist.github.com/paulirish/5d52fb081b3570c81e3a) que conta com uma lista completa do que voc√™ deve evitar.\n\nAlguns deles s√£o:\n\n- Geometria dos elementos: `elem.offsetLeft`, `elem.clientLeft`, `elem.getClientRects()`\n- Scroll (rolagem): `elem.scrollBy()`,¬†`elem.scrollTo()`, `elem.scrollTop`\n- Dimens√µes de window: `window.scrollX`,¬†`window.scrollY`\n- Foco: `elem.focus()`\n\nO Google tamb√©m documenta a boa pr√°tica de evitar Layout Thrashing no artigo [Avoid Large, Complex Layouts and Layout Thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?utm_source=devtools#avoid-forced-synchronous-layouts), que detalha bem algumas coisas que voc√™ deve evitar fazer durante anima√ß√µes, como loops que calculam e mudam o tamanho de v√°rios elementos em sequ√™ncia.\n\n## Sua vez de deixar uma anima√ß√£o CSS perfeita\n\nAgora que voc√™ conhece todo o fluxo de renderiza√ß√£o do navegador, n√≥s podemos criar uma anima√ß√£o CSS perfeita.\n\nE qual a melhor forma de fazer isso? Consertando uma imperfeita, √© claro.\n\nNo [Codepen abaixo](https://codepen.io/hugobessaa/pen/ExWgyJK), temos uma interface bem simples com um conte√∫do principal e um menu lateral. No conte√∫do principal, temos uma lista de tweets com uma anima√ß√£o de _hover_ e um bot√£o para abrir e fechar o menu. Ao ser aberto, o menu lateral √© animado e desliza da esquerda para a direita, enquanto deixa o conte√∫do principal mais escuro.\n\n\u003CIframe fullwidth height=\"500\" scrolling=\"no\" title=\"CSS Animation - &quot;Imperfeito&quot;\" src=\"https://codepen.io/hugobessaa/embed/preview/ExWgyJK?height=500&theme-id=dark&default-tab=html,result\" frameborder=\"no\" loading=\"lazy\">\n  See the Pen \u003Ca href='https://codepen.io/hugobessaa/pen/ExWgyJK'>CSS Animation - &quot;Imperfeito&quot;\u003C/a> by Hugo\n  (\u003Ca href='https://codepen.io/hugobessaa'>@hugobessaa\u003C/a>) on \u003Ca href='https://codepen.io'>CodePen\u003C/a>.\n\u003C/Iframe>\n\nDependendo do seu computador, voc√™ poder√° perceber os problemas de performance nestas anima√ß√µes visualmente.\n\nCaso a anima√ß√£o esteja rodando bem no seu computador, teste algumas coisas:\n\n- Utilize a funcionalidade de [CPU Throttling](https://umaar.com/dev-tips/88-cpu-throttling/);\n- Clique no bot√£o \"Ligar computa√ß√£o pesada\" para simular carga na sua CPU e na thread principal da p√°gina;\n- Teste o exemplo em um celular Android [debugando pelo Chrome DevTools](https://triangulo.dev/posts/atomo-debugar-chrome-do-android-devtools).\n\nAgora √© a **sua vez** de _forkar_ esse [Codepen](https://codepen.io/hugobessaa/pen/ExWgyJK) e modificar o c√≥digo para deixar a anima√ß√£o mais otimizada. Como quero que voc√™ aprenda na pr√°tica, o c√≥digo n√£o est√° documentado. Use o DevTools de Performance para explorar os problemas e utilize o seu conhecimento sobre o fluxo de renderiza√ß√£o.\n\n## Continue aprendendo\n\nAinda n√£o cobrimos tudo sobre anima√ß√µes no CSS. Aqui v√£o algumas refer√™ncias e ferramentas para continuar estudando:\n\n- [Inside look at modern web browser (part 3)](https://developers.google.com/web/updates/2018/09/inside-browser-part3): a principal refer√™ncia deste post;\n- [High Performance Animations](https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/);\n- [10 principles for smooth web animations](https://blog.gyrosco.pe/smooth-css-animations-7d8ffc2c1d29);\n- [Chrome Developers: Inspect Animations](https://developer.chrome.com/docs/devtools/css/animations/);\n- [CSS GPU Animation: Doing It Right](https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/);\n- [Pixels are expensive](https://aerotwist.com/blog/pixels-are-expensive/);\n- [CSS Triggers](https://csstriggers.com/): lista com propriedades CSS e quais fases de renderiza√ß√£o elas ativam em cada navegador quando alteradas;\n- [The Applied Science of Runtime Performance - Chrome Dev Summit 2014 (Paul Lewis)](https://www.youtube.com/watch?v=RCFQu0hK6bU);\n- [Braces to Pixels](https://alistapart.com/article/braces-to-pixels/);\n- [Eliminate content repaints with the new Layers panel in Chrome](https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752/?gi=cd6271834cea);\n- Treine seu conhecimento e analise a performance do site [https://gyrosco.pe/](https://gyrosco.pe/).","src/pages/posts/criando-animacoes-perfeitas-com-css/index.mdx","0f02555a8ead1dc9","css-grid-alinhando-elementos-na-pratica",{"id":215,"data":217,"body":222,"filePath":223,"digest":224,"deferredRender":24},{"layout":14,"title":218,"description":219,"authorName":17,"authorImage":18,"pubDate":220,"ogImage":221},"CSS Grid: alinhando elementos (com exemplos)","Descubra como alinhar seus elementos com CSS Grid, a ferramenta de layout mais poderosa do CSS.",["Date","2021-10-25T00:00:00.000Z"],"/posts/css-grid-alinhando-elementos-na-pratica/social.png","N√≥s temos diversas formas de **alinhar elementos em um cont√™iner grid**. Vamos aprender na pr√°tica como usar cada uma das propriedades dispon√≠veis, com exemplos f√°ceis de entender.\n\nAntes, a gente precisa saber o que √© cada parte do grid:\n\n![Explica√ß√£o de cada parte de um CSS Grid](/posts/css-grid-alinhando-elementos-na-pratica/partes-de-um-css-grid.svg)\n\n- **Cont√™iner grid**: Elemento com `display: grid` ou `display: inline-grid`. √â o elemento pai dos itens grid.\n- **Item grid**: Elementos que s√£o filhos diretos de um cont√™iner grid.\n- **Linha do grid**: Linhas que ficam entre linhas e colunas do grid.\n- **C√©lula do grid**: A unidade b√°sica do grid, a interse√ß√£o entre uma linha e uma coluna do grid.\n- **Trilhas do grid**: Espa√ßo entre duas linhas do grid, representando uma coluna ou linha.\n- **√Årea do grid**: Espa√ßo entre quatro linhas do grid. Pode representar m√∫ltiplas linhas e colunas.\n- **Eixo block**: Eixo em que os itens s√£o adicionados. Por padr√£o, esse √© ao longo de uma coluna.\n- **Eixo inline**: Eixo na dire√ß√£o oposta do eixo block. Geralmente tamb√©m √© o eixo que fica na dire√ß√£o do texto.\n\n## √çndice\n\nAgora, vamos entender cada uma das propriedades de alinhamento:\n\n## Alinhando os itens do grid com align-items e justify-items\n\n### justify-items\n\nAs vezes os itens grid s√£o menores do que o espa√ßo dispon√≠vel na c√©lula. A propriedade `justify-items` alinha todos os **itens grid** ao longo do **eixo inline**.\n\n![Exemplos de valores para justify-items, stretch, start, end e center](/posts/css-grid-alinhando-elementos-na-pratica/justify-items-valores.svg)\n\n- `justify-items: stretch`, o valor padr√£o, define que os itens grid preencher√£o todo o comprimento da c√©lula. Apenas as c√©lulas grid que cont√©m tamanhos `auto` ser√£o redimensionadas.\n- `justify-items: start`, define que os itens grid ser√£o alinhados a partir do come√ßo do eixo inline.\n- `justify-items: end`, define que os itens grid ser√£o alinhados a partir do final do eixo inline.\n- `justify-items: center`, alinha os itens grid ao centro do eixo inline.\n\n### align-items\n\nParecido com a `justify-items`, a propriedade `align-items` alinha todos os **itens grid** que s√£o menores do que o espa√ßo dispon√≠vel em suas c√©lulas ao longo do **eixo block**.\n\n![Exemplos de valores para align-items, stretch, start, end e center](/posts/css-grid-alinhando-elementos-na-pratica/align-items-valores.svg)\n\n- `align-items: stretch`, o valor padr√£o, define que os itens grid preencher√£o toda a altura da c√©lula. Apenas as c√©lulas grid que cont√©m tamanhos `auto` ser√£o redimensionadas.\n- `align-items: start`, define que os itens grid ser√£o alinhados a partir do come√ßo do eixo block.\n- `align-items: end`, define que os itens grid ser√£o alinhados a partir do final do eixo block.\n- `align-items: center`, alinha os itens grid ao centro do eixo block.\n\n### place-items\n\nA propriedade `place-items` nos ajuda a definir `align-items` e `justify-items` ao mesmo tempo. Voc√™ pode usar apenas um valor como `start` ou passar valores do formato `\u003Calign-items> / \u003Cjustify-items>`.\n\n```css\n.grid-1 {\n  display: grid;\n  place-items: center;\n\n  /* √© como escrever: */\n  align-items: center;\n  justify-items: center;\n}\n\n.grid-2 {\n  display: grid;\n  place-items: start / end;\n\n  /* √© como escrever: */\n  align-items: start;\n  justify-items: end;\n}\n```\n\n![Exemplos de valores para place-items: center e start / end](/posts/css-grid-alinhando-elementos-na-pratica/place-items-valores.svg)\n\n## Alinhando o conte√∫do do grid com justify-content e align-content\n\n### justify-content\n\nA propriedade `justify-content` alinha todo o conte√∫do de um cont√™iner grid ao longo do eixo inline, o que √© bem √∫til quando o conte√∫do n√£o preenche todo o espa√ßo dentro do cont√™iner.\n\n- `justify-content: stretch`, o valor padr√£o, define que os itens grid ser√£o redimensionados para preencher todo o cont√™iner grid no eixo inline. Apenas as c√©lulas grid que cont√©m tamanhos `auto` ser√£o redimensionadas.\n- `justify-content: start`, define que o conte√∫do do grid ser√° alinhado ao come√ßo do eixo inline.\n- `justify-content: end`, define que o conte√∫do do grid ser√° alinhado ao final do eixo inline.\n- `justify-content: center`, centraliza o conte√∫do do grid no eixo inline.\n\n![Exemplos de valores para justify-content, stretch, start, end e center](/posts/css-grid-alinhando-elementos-na-pratica/justify-content-valores.svg)\n\nPara espa√ßar o conte√∫do, tamb√©m temos:\n\n- `justify-content: space-between`: adiciona espa√ßo entre os itens e nenhum espa√ßo nas extremidades.\n- `justify-content: space-around`: adiciona um espa√ßo igual entre os itens e metade do espa√ßo nas extremidades.\n- `justify-content: space-evenly`: adiciona um espa√ßo igual entre os itens e nas extremidades.\n\n![Exemplos de valores para justify-content: space-between, space-around, space-evenly](/posts/css-grid-alinhando-elementos-na-pratica/justify-content-space-valores.svg)\n\n### align-content\n\nA propriedade `align-content` modifica o alinhamento do conte√∫do de um cont√™iner grid quando ele √© menor do que o espa√ßo dispon√≠vel no eixo block.\n\nOs valores que podemos usar s√£o:\n\n- `align-content: stretch`, o valor padr√£o, define que os itens grid ser√£o redimensionados para preencher todo o cont√™iner grid no eixo block. Apenas as c√©lulas grid que cont√©m tamanhos `auto` ser√£o redimensionadas.\n- `align-content: start`, define que o conte√∫do do grid ser√° alinhado ao come√ßo do eixo block.\n- `align-content: end`, define que o conte√∫do do grid ser√° alinhado ao final do eixo block.\n- `align-content: center`, centraliza o conte√∫do do grid no eixo block.\n\n![Exemplos de valores para align-content, stretch, start, end e center](/posts/css-grid-alinhando-elementos-na-pratica/align-content-valores.svg)\n\nPara espa√ßar o conte√∫do no eixo block, tamb√©m temos:\n\n- `align-content: space-between`: adiciona espa√ßo entre os itens e nenhum espa√ßo nas extremidades.\n- `align-content: space-around`: adiciona um espa√ßo igual entre os itens e metade do espa√ßo nas extremidades.\n- `align-content: space-evenly`: adiciona um espa√ßo igual entre os itens e nas extremidades.\n\n![Exemplos de valores para align-content: space-between, space-around, space-evenly](/posts/css-grid-alinhando-elementos-na-pratica/align-content-space-valores.svg)\n\n### place-content\n\nA propriedade `place-content` √© um atalho para definir `align-content` e `justify-content` ao mesmo tempo. Voc√™ pode usar apenas um valor como `start` ou passar valores do formato `\u003Calign-content> / \u003Cjustify-content>`.\n\n```css\n.grid-1 {\n  display: grid;\n  place-content: center;\n\n  /* √© como escrever: */\n  align-content: center;\n  justify-content: center;\n}\n\n.grid-2 {\n  display: grid;\n  place-content: stretch / end;\n\n  /* √© como escrever: */\n  align-content: stretch;\n  justify-content: end;\n}\n```\n\n![Exemplos de valores para place-content: center e stretch / end](/posts/css-grid-alinhando-elementos-na-pratica/place-content-valores.svg)\n\n## Definindo o alinhamento de um item no grid com justify-self e align-self\n\nPara as vezes que queremos mudar o alinhamento apenas de um item grid, podemos usar `justify-self`, `align-self` e `place-self`. Essas propriedades s√£o aplicadas no item grid.\n\n### justify-self\n\n- `justify-self: stretch`, define que o item preencher√° o comprimento da c√©lula. Apenas as c√©lulas grid que cont√©m tamanhos `auto` ser√£o redimensionadas.\n- `justify-self: start`, move o item para o come√ßo da c√©lula no eixo inline.\n- `justify-self: end`, move o item para o final da c√©lula no eixo inline.\n- `justify-self: center`, centraliza o item na c√©lula no eixo inline.\n\n![Exemplos de valores para justify-self: stretch, start, end e center](/posts/css-grid-alinhando-elementos-na-pratica/justify-self-valores.svg)\n\n### align-self\n\n- `align-self: stretch`, define que o item preencher√° a altura da c√©lula. Apenas as c√©lulas grid que cont√©m tamanhos `auto` ser√£o redimensionadas.\n- `align-self: start`, move o item para o come√ßo da c√©lula no eixo block.\n- `align-self: end`, move o item para o final da c√©lula no eixo block.\n- `align-self: center`, centraliza o item na c√©lula no eixo block.\n\n![Exemplos de valores para align-self: stretch, start, end e center](/posts/css-grid-alinhando-elementos-na-pratica/align-self-valores.svg)\n\n### place-self\n\nA propriedade `place-self` √© um atalho para definir `align-self` e `justify-self` ao mesmo tempo. Voc√™ pode usar apenas um valor como `start` ou passar valores do formato `\u003Calign-self> / \u003Cjustify-self>`.\n\n```css\n.grid {\n  display: grid;\n}\n\n.item-1 {\n  place-self: center;\n\n  /* √© como escrever: */\n  align-self: center;\n  justify-self: center;\n}\n\n.item-2 {\n  place-self: stretch / end;\n\n  /* √© como escrever: */\n  align-self: stretch;\n  justify-self: end;\n}\n```\n\n![Exemplos de valores para place-self: center e stretch / end](/posts/css-grid-alinhando-elementos-na-pratica/place-self-valores.svg)\n\n## Continue aprendendo\n\nO CSS Grid √© uma ferramenta muito poderosa para criar layouts em duas dimens√µes. Neste artigo exploramos apenas uma pequena parte de todas as suas capacidades. Acompanhe os posts dessa s√©rie:\n\n- [CSS Grid: o b√°sico que voc√™ precisa saber (com exemplos)](/posts/css-grid-o-que-voce-precisa-saber);\n- [CSS Grid: posicionando elementos, na pr√°tica](/posts/css-grid-posicionando-elementos-na-pratica);\n- [CSS Grid: alinhando elementos (com exemplos)](/posts/css-grid-alinhando-elementos-na-pratica);\n- [Criando layouts responsivos com CSS Grid](/posts/criando-layouts-responsivos-css-grid);\n- [Usando grid-template-areas do CSS Grid](/posts/usando-grid-template-areas-do-css-grid);\n\nAlguns destes artigos ainda n√£o foram publicados, ent√£o inscreva-se na newsletter do Tri√¢ngulo para receber atualiza√ß√µes.\n\nPara ir ainda mais a fundo sobre o alinhamento com CSS Grid, leia [Box alignment in CSS Grid Layout (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout). A especifica√ß√£o [CSS Box Alignment Module Level 3 (w3.org)](https://www.w3.org/TR/css-align-3/) tamb√©m pode ser √∫til para ter certeza de como funciona cada uma das propriedades e seus valores.\n\nOutro excelente guia sobre CSS Grid, que me ajudou bastante quando eu estava aprendendo √© o [Complete Guide to Grid (css-tricks.com)](https://css-tricks.com/snippets/css/complete-guide-grid/).\n\nNosso Guia de Estudos CSS tamb√©m conta com uma [se√ß√£o dedicada para o CSS Grid](https://trello.com/c/Vf40uwRL/13-css-grid). Bons estudos!","src/pages/posts/css-grid-alinhando-elementos-na-pratica/index.mdx","88b995788a55340a","ferramentas-essenciais-frontend",{"id":225,"data":227,"body":232,"filePath":233,"digest":234,"deferredRender":24},{"layout":14,"title":228,"description":229,"authorName":17,"authorImage":18,"pubDate":230,"ogImage":231},"Ferramentas Essenciais no Front-end - Undefined #2","Extens√µes, aplicativos, editores, sites e navegadores que desenvolvedores front-end recomendam para facilitar nosso dia-a-dia",["Date","2021-01-26T00:00:00.000Z"],"/posts/ferramentas-essenciais-frontend/social.png","Quais s√£o as ferramentas que mais usamos como pessoas desenvolvedoras front-end? Foi pra responder essa pergunta que organizei uma sala no üëã Clubhouse, com Isadora Stangarlin (do [@papodedev](https://instagram.com/papodedev)) e [Eder Christian](https://instagram.com/ederchristian92). Toda a conversa que tivemos ao vivo foi muito interessante e me fez gastar uma p√°gina inteira do caderno s√≥ com os nomes das ferramentas citadas.\n\nNo Clubhouse as pessoas que est√£o ouvindo ao vivo podem pedir para participar e falar. Por causa disso, v√°rias pessoas compartilharam suas ferramentas favoritas durante nossa uma hora de conversa.\n\nComo toda pessoa desenvolvedora, usamos um editor de texto ou IDE para escrever boa parte do nosso c√≥digo. O VS Code foi uma presen√ßa un√¢nime como o editor favorito de todo mundo que estava na sala. Acho que n√£o sobra muita d√∫vida sobre o porqu√™. Quase todo mundo da sala programava em JavaScript e o VS Code tem muitas ferramentas √∫teis para essa linguagem. Se me perguntassem no come√ßo de 2020 qual era meu editor de texto favorito, com certeza falaria o Vim. Depois de 5 anos como meu editor padr√£o, troquei o Vim pelo VS Code quando comecei a programar em TypeScript ‚Äî simplesmente n√£o d√° para ignorar que o VS Code √© o melhor editor gratuito para trabalhar em projetos escritos com TypeScript.\n\nAl√©m de falar de editores de texto, tamb√©m compartilhamos os navegadores que usamos, extens√µes na web, extens√µes do VS Code, aplicativos e sites favoritos. Aqui vai uma lista de todas as ferramentas que citamos na conversa:\n\n[Hugo de Oliveira](https://instagram.com/triangulo_dev):\n\n- [Chrome](https://www.google.com/intl/pt-BR/chrome/): navegador\n- [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb): extens√£o do Chrome que te deixa navegar pelo site sem utilizar o mouse, com atalhos inspirados pelo Vim\n- [VS Code](https://code.visualstudio.com/): editor\n- [vim-mode](https://github.com/VSCodeVim/Vim): extens√£o para emular o Vim dentro do VS Code\n- [Figma](https://www.figma.com/): aplicativo gratuito de cria√ß√£o de designs com ferramentas de colabora√ß√£o em tempo real\n- [Codepen](https://codepen.io/): site para prototipa√ß√£o r√°pida com HTML, JS e CSS\n- [Codesandbox](https://codesandbox.io/): editor completo online com ferramentas de execu√ß√£o de c√≥digo sem instalar nada no seu computador\n- [Browsersync](https://browsersync.io/): ferramenta de linha de comando que sincroniza a navega√ß√£o em um site entre v√°rios dispositivos\n- [Dev.to](https://dev.to/): site artigos sobre programa√ß√£o\n\n[Isadora Stangarlin](https://instagram.com/papodedev):\n\n- [Chrome](https://www.google.com/intl/pt-BR/chrome/): navegador\n- [VS Code](https://code.visualstudio.com/): editor\n- [ColorPick](https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg): extens√£o do Chrome para copiar a cor de qualquer elemento de um site\n- [Clear Cache](https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?hl=pt): extens√£o do Chrome para limpar todo o cache de um site\n- [Cssmatic](http://www.cssmatic.com/): ferramentas para CSS\n- [daily.dev](https://chrome.google.com/webstore/detail/dailydev-news-for-busy-de/jlmpjdjjbgclbocgajdjefcidcncaied): extens√£o do Chrome que te mostra novidades da √°rea de TI na tela de nova aba\n- [Medium](https://medium.com/): site com muitos artigos sobre desenvolvimento\n- [Panda](https://usepanda.com/): agregador de conte√∫do\n- [Udemy](https://www.udemy.com/pt/): plataforma de cursos\n\n[Eder Christian](https://instagram.com/ederchristian92):\n\n- [VS Code](https://code.visualstudio.com/): editor\n- [Smashing Magazine](https://www.smashingmagazine.com/): site com √≥timos artigos sobre programa√ß√£o, principalmente front-end\n- [Vercel.app](https://vercel.app/): servi√ßo para deploy de projetos front-end, √≥timo para usar com Next.js\n- [Frontend Masters](https://frontendmasters.com/): plataforma de cursos\n\n[Jo√£o Deroldo](https://instagram.com/joaoderoldo)\n\n- [Emmet](https://code.visualstudio.com/docs/editor/emmet): extens√£o para escrever HTML r√°pido\n\n[Daniel Filho](https://twitter.com/danielfilho)\n\n- [Firefox](https://www.mozilla.org/pt-BR/firefox/): navegador\n- [Multi Account Container](https://addons.mozilla.org/pt-BR/firefox/addon/multi-account-containers/): extens√£o do Firefox para isolar cookies e cache de sites\n- [Envify](https://addons.mozilla.org/pt-BR/firefox/addon/envify/): extens√£o do Firefox para colorir o navegador baseado na URL (√∫til para diferenciar ambientes de desenvolvimento e produc√£o)\n- [VS Code](https://code.visualstudio.com/): editor\n- [Live Share](https://visualstudio.microsoft.com/pt-br/services/live-share/): extens√£o do VS Code para fazer paired programming dentro do VS Code\n- [All about Next.js](https://www.udemy.com/course/all-about-nextjs/): curso sobre o framework Next.js\n\n[Lucas Viana](https://instagram.com/mechamobau):\n\n- [colorhunt.co](https://colorhunt.co/): site para descobrir paletas de cores\n- [getwaves.io](https://getwaves.io/): site para criar \"ondas\" em SVG, para usar como divisor de se√ß√µes\n\n[Andre Benatti](https://instagram.com/dotpegaso)\n\n- [mobbin.design](https://mobbin.design/): cole√ß√µes de inspira√ß√µes para designs\n- [Undesign](https://undesign.learn.uno/): ferramentas para design\n- [Photopea](https://www.photopea.com/): site \"Photoshop online\"\n- [uppbeat.io](https://uppbeat.io/): site com m√∫sicas sem DRM para utilizar em v√≠deos ou podcasts\n\n[N√°sser Yousef](https://instagram.com/nasser.yousefali)\n\n- [animaapp.com](https://www.animaapp.com/): plugin para transformar designs em c√≥digo e prot√≥tipos responsivos\n- [animista.net](https://animista.net/): site para criar anima√ß√µes CSS com uma ferramenta visual\n\nEu n√£o conhecia muitas das ferramentas que o pessoal recomendou nessa conversa no Clubhouse. D√° uma olhada em cada uma e n√£o se esque√ßa de ver tamb√©m o perfil no Instagram/Twitter de quem contribuiu. Faltou alguma que voc√™ usa muito? [Manda pra mim](https://instagram.com/triangulo_dev).","src/pages/posts/ferramentas-essenciais-frontend/index.mdx","e01aabd7af65d6a5","usando-grid-template-areas-do-css-grid",{"id":235,"data":237,"body":242,"filePath":243,"digest":244,"deferredRender":24},{"layout":14,"title":238,"description":239,"authorName":17,"authorImage":18,"pubDate":240,"ogImage":241},"Usando grid-template-areas do CSS Grid","√Åreas podem ser utilizadas para delimitar espa√ßos no seu layout que ser√£o utilizados por alguns elementos. Elas tamb√©m servem para facilitar a cria√ß√£o de layouts responsivos com CSS Grid.",["Date","2022-12-06T21:00:00.000Z"],"/posts/usando-grid-template-areas-do-css-grid/social.png","import SideNote from \"../../../components/typography/SideNote.astro\";\n\n**√Åreas facilitam muito a cria√ß√£o de layouts no CSS Grid**. Junto com todas as outras ferramentas desse algoritmo de layout do CSS, √°reas deixam simples criar **layouts responsivos com apenas um pouco de c√≥digo**.\n\n![Partes do CSS Grid, com foco na √°rea do grid](/posts/usando-grid-template-areas-do-css-grid/partes-do-css-grid-com-foco-na-area.svg)\n\nAlgumas das vantagens de usar √°reas do CSS Grid, s√£o:\n\n1. F√°cil defini√ß√£o de posi√ß√£o das √°reas da sua aplica√ß√£o em diferente _breakpoints_;\n1. O c√≥digo demonstra visualmente o layout que voc√™ est√° criando;\n1. Voc√™ pode referenciar os nomes das √°reas em `grid-column` e `grid-row`;\n1. √â poss√≠vel definir \"espa√ßos em branco\" de forma bastante clara.\n\nPara criar √°reas no grid usamos a propriedade `grid-template-areas`. A sintaxe do `grid-template-areas` √© intuitiva: voc√™ s√≥ precisa usar _strings_ que definem tanto os nomes das √°reas quanto suas estruturas e posicionamento.\n\n```css\n.container {\n  display: grid;\n  grid-template-areas:\n    \"content ads\"\n    \"content suggested\";\n}\n```\n\nQuando definidos, os nomes das √°reas podem ser usados em conjunto com as propriedades `grid-column`, `grid-row`, `grid-area` e outras para definir o posicionamento de itens no grid. √â da√≠ que vem o poder.\n\n## √çndice\n\n## Criando e usando √°reas no grid com `grid-template-areas`\n\nPara aprender a usar o `grid-template-areas`, n√≥s vamos usar o layout de um blog como exemplo. Um blog usando outro blog como exemplo, por qu√™ n√£o?\n\nA p√°gina que vamos implementar √© a p√°gina de um artigo. Nela temos o cabe√ßalho do site (_header_), o conte√∫do (_content_), a barra lateral (_sidebar_) e o rodap√© (_footer_). Para estruturar esse layout, vamos usar tr√™s _strings_ organizadas da mesma forma que essas se√ß√µes estar√£o dispostas na tela:\n\n![Exemplo de layout de uma p√°gina de artigo em um blog](/posts/usando-grid-template-areas-do-css-grid/layout-artigo-no-blog.svg)\n\n```css\n.page {\n  display: grid;\n  grid-template-areas:\n    \"header  header\"\n    \"content sidebar\"\n    \"footer  footer\";\n}\n```\n\nEssa defini√ß√£o j√° vai criar quatro √°reas no cont√™iner grid: `header`, `content`, `sidebar` e `footer`. Da defini√ß√£o tamb√©m saem as tr√™s linhas e as duas colunas. N√£o existe um limite definido de quantas linhas e colunas podemos criar dessa forma. A √∫nica regra √© que cada √°rea precisa ser um ret√¢ngulo\u003CSideNote>Se voc√™ tentar criar √°reas em formatos de \"T\", \"L\" ou \"cruz\", aquela √°rea ser√° inv√°lida. ![Exemplos de formatos inv√°lidos para √°reas no grid, including T, L e cruz](/posts/usando-grid-template-areas-do-css-grid/formatos-invalidos-de-areas-no-grid.svg)\u003C/SideNote>.\n\nAdicionando um HTML simples no projeto, podemos perceber que cada elemento ocupa cada coluna e linha em sequ√™ncia, ignorando as √°reas.\n\n```html\n\u003Cmain class=\"page\">\n  \u003Cheader class=\"header\">Cabe√ßalho\u003C/header>\n  \u003Carticle class=\"content\">Conte√∫do\u003C/article>\n  \u003Caside class=\"sidebar\">Barra lateral\u003C/aside>\n  \u003Cfooter class=\"footer\">Rodap√©\u003C/footer>\n\u003C/main>\n```\n\n![Exemplo da posi√ß√£o incorreta dos elementos por n√£o definir a √°rea no grid que cada um ocupa](/posts/usando-grid-template-areas-do-css-grid/posicao-incorreta-elementos-no-grid.svg)\n\nIsso acontece porque ainda n√£o definimos a √°rea que cada elemento vai ocupar.\n\nPara definir qual elemento da sua p√°gina ocupar√° cada √°rea do grid, usaremos a propriedade `grid-area`:\n\n```css\n.header {\n  grid-area: header;\n}\n.content {\n  grid-area: content;\n}\n.sidebar {\n  grid-area: sidebar;\n}\n.footer {\n  grid-area: footer;\n}\n```\n\nAgora cada elemento est√° em sua √°rea no grid. Vamos adicionar mais um pouco de CSS para estilizar essa p√°gina.\n\n```css\n.page {\n  min-height: 100vh;\n}\n\n.header,\n.content,\n.sidebar,\n.footer {\n  padding: 10px;\n  font-size: 1.5rem;\n}\n\n.header {\n  background: #0088ff;\n}\n.content {\n  background: #6bc9bb;\n}\n.sidebar {\n  background: #00b3a1;\n}\n.footer {\n  background: #ff802e;\n}\n```\n\nJ√° parece um pouco melhor, mas ainda precisamos definir o tamanho de cada √°rea, para ter um layout que se assemelha √† uma p√°gina de um artigo em um blog.\n\n## Definindo o tamanho de √°reas no grid com `grid-template-rows` e `grid-template-columns`\n\nPara definir o tamanho de linhas e colunas em um cont√™iner grid usamo `grid-template-rows` e `grid-template-columns`, como mostramos no [post que cobrimos o b√°sico que voc√™ precisa saber de CSS Grid](https://triangulo.dev/posts/css-grid-o-que-voce-precisa-saber). Quando usamos `grid-template-areas` n√£o √© muito diferente.\n\nNo nosso exemplo, n√≥s temos tr√™s linhas e duas colunas. Ent√£o, basta definir o tamanho dessas linhas e colunas no nosso CSS:\n\n```css\n.page {\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: 3fr 1fr;\n}\n```\n\n![Resultado final de aplicar tamanho √†s √°reas no grid](/posts/usando-grid-template-areas-do-css-grid/layout-artigo-no-blog.svg)\n\nQualquer valor v√°lido para as propriedades `grid-template-rows` e `grid-template-columns` pode ser usado aqui. Isso √© muito √∫til para criar layouts bem flex√≠veis e exatamente como queremos.\n\nO cont√™iner grid continuar√° acomodando mais elementos que adicionarmos dentro dele tamb√©m. Para control√°-los, podemos utilizar as [t√©cnicas de estiliza√ß√£o da grid impl√≠cita](https://triangulo.dev/posts/css-grid-o-que-voce-precisa-saber#explorando-a-grid-impl√≠cita-com-grid-auto-rows-e-grid-auto-columns).\n\n## Criando √°reas em branco com \"`.`\" no `grid-template-areas`\n\nVamos supor que n√≥s queremos que uma parte do grid n√£o fa√ßa parte de uma √°rea. Talvez o rodap√© da p√°gina deva ficar apenas embaixo do conte√∫do, e n√£o tamb√©m embaixo da barra lateral. Para demarcar essas \"√°reas em branco\", podemos usar um `.` (ponto).\n\n```css\n.page {\n  grid-template-areas:\n    \"header  header\"\n    \"content sidebar\"\n    \"footer  .\";\n}\n```\n\n![Resultado de adicionar um espa√ßo em branco √†s √°reas no grid](/posts/usando-grid-template-areas-do-css-grid/layout-grid-com-espaco-em-branco.svg)\n\n## Design responsivo com √°reas no grid e @media queries\n\nUsando `@media` queries conseguimos mudar o valor de propriedades CSS em diferentes dispositivos e tamanhos de tela. √Åreas no grid s√£o muito √∫teis nesses casos ‚Äî quando temos que reorganizar o layout de uma p√°gina.\n\nNuma p√°gina de artigo em um blog, por exemplo, ter√≠amos que acomodar a barra lateral (_sidebar_) abaixo do conte√∫do (_content_) em telas pequenas. Para isso, usar√≠amos `@media` queries:\n\n```css\n@media (max-width: 500px) {\n  .page {\n    grid-template-areas:\n      \"header\"\n      \"content\"\n      \"sidebar\"\n      \"footer\";\n    grid-template-rows: auto 1fr auto auto;\n    grid-template-columns: 1fr;\n  }\n}\n```\n\n![Resultado de usar @media queries para controlar as √°reas no grid em diferentes tamanho de tela. √Ä esquerda temos um layout em uma coluna, para telas com menos de 500px de largura. √Ä direita, um layout com duas colunas, para telas com 500px ou mais de largura](/posts/usando-grid-template-areas-do-css-grid/design-responsivo-com-areas-no-grid.svg)\n\nNessa `@media` query, mudamos o layout de `.page` para ter uma coluna e quatro linhas. Al√©m de mudar o valor de `grid-template-areas`, tamb√©m tivemos que alterar `grid-template-rows` e `grid-template-columns`.\n\nJuntar `@media` queries e `grid-template-areas` √© um super poder no CSS Grid, j√° que facilita muito a cria√ß√£o de layouts responsivos.\n\n## Linhas e colunas impl√≠citas criadas com `grid-template-areas`\n\nQuando criamos √°reas no grid usando a propriedade `grid-template-areas`, s√£o criados tamb√©m nomes para linhas e colunas no nosso grid. Esses nomes seguem o padr√£o `area-start` e `area-end` para o come√ßo e o t√©rmino de cada √°rea.\n\n![Exemplos dos nomes de linhas -start e -end](/posts/usando-grid-template-areas-do-css-grid/exemplo-linhas-start-end.svg)\n\nEsses nomes podem ser usados em propriedades como `grid-column-start`, `grid-column-end`, `grid-row-start` e `grid-row-end`. Podemos, ent√£o, definir que um elemento come√ßa em uma parte da √°rea e termina em outra √°rea, por exemplo. N√£o ficamos limitados a usar apenas uma √°rea por inteiro.\n\n```css\n.popup {\n  grid-column-start: content-start;\n  grid-column-end: sidebar-end;\n  grid-row-start: content-start;\n  grid-row-end: span 1; /* podemos misturar nomes e unidades */\n\n  /* Estilos extra */\n  padding: 10px;\n  font-size: 1.5rem;\n  background: #ffffffaa;\n}\n```\n\n![Exemplo do popup estilizado com os nomes de linhas e colunas](/posts/usando-grid-template-areas-do-css-grid/exemplo-popup-com-grid-column-row-names.svg)\n\n## Usando a \"propriedade-atalho\" `grid-template`\n\nA propriedade `grid-template-areas` √© s√≥ uma das formas de criar √°reas em um grid. Temos tamb√©m a \"propriedade-atalho\" `grid-template`. Com o `grid-template` conseguimos definir as √°reas, o tamanho das colunas e o tamanho das linhas de uma vez s√≥.\n\nEm vez de usar `grid-template-areas`, `grid-template-rows` e `grid-template-columns`, podemos condensar tudo em um `grid-template`:\n\n```css\n.page {\n  display: grid;\n  grid-template:\n    \"header  header\" auto\n    \"content sidebar\" 1fr\n    \"footer  footer\" 1fr / 3fr 1fr;\n\n  /* O que seria o equivalente a: */\n  grid-template-areas:\n    \"header  header\"\n    \"content sidebar\"\n    \"footer  footer\";\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: 3fr 1fr;\n}\n```\n\nA sintaxe do `grid-template` para criar √°reas no grid √© parecida com `grid-template-areas`, s√≥ que ao lado de cada linha de √°reas definimos o tamanho daquela linha (como far√≠amos com `grid-template-rows`). Ao final de tudo, adicionamos uma barra (`/`) e escrevemos os tamanhos das colunas (como far√≠amos com `grid-template-columns`).\n\n`grid-template` pode ser utilizado de v√°rias formas, n√£o apenas como eu te mostrei agora. Se quiser aprender todas as formas dispon√≠veis, d√° uma olhada na [p√°gina sobre `grid-template` no MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template).\n\n## Suporte do `grid-template-areas` em diferentes navegadores\n\nO [suporte dos navegadores para `grid-area` √© muito bom](https://caniuse.com/mdn-css_properties_grid-area), mais de 95% dos usu√°rios da web no mundo. Como a especifica√ß√£o do CSS Grid √© dividida em algumas partes, vale a pena checar o [suporte de cada funcionalidade que voc√™ vai utilizar no caniuse.com](https://caniuse.com/?search=css%20grid).\n\n√â grande a chance de que suporte em navegadores n√£o ser√° um impeditivo para voc√™.\n\n## Continue aprendendo\n\nEsse √© o √∫ltimo post de uma s√©rie que explora v√°rias das funcionalidades do CSS Grid aqui no Tri√¢ngulo. CSS Grid √© muito poderoso e nos permite criar layouts de uma forma que antes n√£o era muito pr√°tica com CSS.\n\n- [CSS Grid: o b√°sico que voc√™ precisa saber (com exemplos)](/posts/css-grid-o-que-voce-precisa-saber);\n- [CSS Grid: posicionando elementos, na pr√°tica](/posts/css-grid-posicionando-elementos-na-pratica);\n- [CSS Grid: alinhando elementos (com exemplos)](/posts/css-grid-alinhando-elementos-na-pratica);\n- [Criando layouts responsivos com CSS Grid](/posts/criando-layouts-responsivos-css-grid);\n- [Usando grid-template-areas para criar layouts no CSS Grid](/posts/usando-grid-template-areas-do-css-grid);\n\nPara escrever esse post eu usei o [excelente artigo no MDN sobre `grid-template-areas` (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas) e tamb√©m a [especifica√ß√£o do CSS Grid (drafts.csswg.org)](https://drafts.csswg.org/css-grid/#grid-template-areas-property).\n\nBons estudos!","src/pages/posts/usando-grid-template-areas-do-css-grid/index.mdx","573de32635a76a4d"]